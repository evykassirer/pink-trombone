/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/osc-js/lib/osc.browser.js":
/*!************************************************!*\
  !*** ./node_modules/osc-js/lib/osc.browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nfunction isInt(n) {\n  return Number(n) === n && n % 1 === 0;\n}\nfunction isFloat(n) {\n  return Number(n) === n && n % 1 !== 0;\n}\nfunction isString(n) {\n  return typeof n === 'string';\n}\nfunction isArray(n) {\n  return Object.prototype.toString.call(n) === '[object Array]';\n}\nfunction isObject(n) {\n  return Object.prototype.toString.call(n) === '[object Object]';\n}\nfunction isFunction(n) {\n  return typeof n === 'function';\n}\nfunction isBlob(n) {\n  return n instanceof Uint8Array;\n}\nfunction isDate(n) {\n  return n instanceof Date;\n}\nfunction isUndefined(n) {\n  return typeof n === 'undefined';\n}\nfunction pad(n) {\n  return n + 3 & ~0x03;\n}\nfunction hasProperty(name) {\n  return Object.prototype.hasOwnProperty.call(typeof global !== 'undefined' ? global : window,\n  name);\n}\nfunction dataView(obj) {\n  if (obj.buffer) {\n    return new DataView(obj.buffer);\n  } else if (obj instanceof ArrayBuffer) {\n    return new DataView(obj);\n  }\n  return new DataView(new Uint8Array(obj));\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nfunction typeTag(item) {\n  if (isInt(item)) {\n    return 'i';\n  } else if (isFloat(item)) {\n    return 'f';\n  } else if (isString(item)) {\n    return 's';\n  } else if (isBlob(item)) {\n    return 'b';\n  }\n  throw new Error('OSC typeTag() found unknown value type');\n}\nfunction prepareAddress(obj) {\n  var address = '';\n  if (isArray(obj)) {\n    return '/' + obj.join('/');\n  } else if (isString(obj)) {\n    address = obj;\n    if (address.length > 1 && address[address.length - 1] === '/') {\n      address = address.slice(0, address.length - 1);\n    }\n    if (address.length > 1 && address[0] !== '/') {\n      address = '/' + address;\n    }\n    return address;\n  }\n  throw new Error('OSC prepareAddress() needs addresses of type array or string');\n}\nfunction prepareRegExPattern(str) {\n  var pattern = void 0;\n  if (!isString(str)) {\n    throw new Error('OSC prepareRegExPattern() needs strings');\n  }\n  pattern = str.replace(/\\./g, '\\\\.');\n  pattern = pattern.replace(/\\(/g, '\\\\(');\n  pattern = pattern.replace(/\\)/g, '\\\\)');\n  pattern = pattern.replace(/\\{/g, '(');\n  pattern = pattern.replace(/\\}/g, ')');\n  pattern = pattern.replace(/,/g, '|');\n  pattern = pattern.replace(/\\[!/g, '[^');\n  pattern = pattern.replace(/\\?/g, '.');\n  pattern = pattern.replace(/\\*/g, '.*');\n  return pattern;\n}\nvar EncodeHelper = function () {\n  function EncodeHelper() {\n    classCallCheck(this, EncodeHelper);\n    this.data = [];\n    this.byteLength = 0;\n  }\n  createClass(EncodeHelper, [{\n    key: 'add',\n    value: function add(item) {\n      var buffer = item.pack();\n      this.byteLength += buffer.byteLength;\n      this.data.push(buffer);\n      return this;\n    }\n  }, {\n    key: 'merge',\n    value: function merge() {\n      var result = new Uint8Array(this.byteLength);\n      var offset = 0;\n      this.data.forEach(function (data) {\n        result.set(data, offset);\n        offset += data.byteLength;\n      });\n      return result;\n    }\n  }]);\n  return EncodeHelper;\n}();\n\nvar Atomic = function () {\n  function Atomic(value) {\n    classCallCheck(this, Atomic);\n    this.value = value;\n    this.offset = 0;\n  }\n  createClass(Atomic, [{\n    key: 'pack',\n    value: function pack(method, byteLength) {\n      if (!(method && byteLength)) {\n        throw new Error('OSC Atomic cant\\'t be packed without given method or byteLength');\n      }\n      var data = new Uint8Array(byteLength);\n      var dataView$$1 = new DataView(data.buffer);\n      if (isUndefined(this.value)) {\n        throw new Error('OSC Atomic cant\\'t be encoded with empty value');\n      }\n      dataView$$1[method](this.offset, this.value, false);\n      return data;\n    }\n  }, {\n    key: 'unpack',\n    value: function unpack(dataView$$1, method, byteLength) {\n      var initialOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      if (!(dataView$$1 && method && byteLength)) {\n        throw new Error('OSC Atomic cant\\'t be unpacked without given dataView, method or byteLength');\n      }\n      if (!(dataView$$1 instanceof DataView)) {\n        throw new Error('OSC Atomic expects an instance of type DataView');\n      }\n      this.value = dataView$$1[method](initialOffset, false);\n      this.offset = initialOffset + byteLength;\n      return this.offset;\n    }\n  }]);\n  return Atomic;\n}();\n\nvar AtomicInt32 = function (_Atomic) {\n  inherits(AtomicInt32, _Atomic);\n  function AtomicInt32(value) {\n    classCallCheck(this, AtomicInt32);\n    if (value && !isInt(value)) {\n      throw new Error('OSC AtomicInt32 constructor expects value of type number');\n    }\n    return possibleConstructorReturn(this, (AtomicInt32.__proto__ || Object.getPrototypeOf(AtomicInt32)).call(this, value));\n  }\n  createClass(AtomicInt32, [{\n    key: 'pack',\n    value: function pack() {\n      return get(AtomicInt32.prototype.__proto__ || Object.getPrototypeOf(AtomicInt32.prototype), 'pack', this).call(this, 'setInt32', 4);\n    }\n  }, {\n    key: 'unpack',\n    value: function unpack(dataView$$1) {\n      var initialOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return get(AtomicInt32.prototype.__proto__ || Object.getPrototypeOf(AtomicInt32.prototype), 'unpack', this).call(this, dataView$$1, 'getInt32', 4, initialOffset);\n    }\n  }]);\n  return AtomicInt32;\n}(Atomic);\n\nvar AtomicFloat32 = function (_Atomic) {\n  inherits(AtomicFloat32, _Atomic);\n  function AtomicFloat32(value) {\n    classCallCheck(this, AtomicFloat32);\n    if (value && !isFloat(value)) {\n      throw new Error('OSC AtomicFloat32 constructor expects value of type float');\n    }\n    return possibleConstructorReturn(this, (AtomicFloat32.__proto__ || Object.getPrototypeOf(AtomicFloat32)).call(this, value));\n  }\n  createClass(AtomicFloat32, [{\n    key: 'pack',\n    value: function pack() {\n      return get(AtomicFloat32.prototype.__proto__ || Object.getPrototypeOf(AtomicFloat32.prototype), 'pack', this).call(this, 'setFloat32', 4);\n    }\n  }, {\n    key: 'unpack',\n    value: function unpack(dataView$$1) {\n      var initialOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return get(AtomicFloat32.prototype.__proto__ || Object.getPrototypeOf(AtomicFloat32.prototype), 'unpack', this).call(this, dataView$$1, 'getFloat32', 4, initialOffset);\n    }\n  }]);\n  return AtomicFloat32;\n}(Atomic);\n\nvar STR_SLICE_SIZE = 65537;\nvar STR_ENCODING = 'utf-8';\nfunction charCodesToString(charCodes) {\n  if (hasProperty('Buffer')) {\n    return Buffer.from(charCodes).toString(STR_ENCODING);\n  } else if (hasProperty('TextDecoder')) {\n    return new TextDecoder(STR_ENCODING)\n    .decode(new Int8Array(charCodes));\n  }\n  var str = '';\n  for (var i = 0; i < charCodes.length; i += STR_SLICE_SIZE) {\n    str += String.fromCharCode.apply(null, charCodes.slice(i, i + STR_SLICE_SIZE));\n  }\n  return str;\n}\nvar AtomicString = function (_Atomic) {\n  inherits(AtomicString, _Atomic);\n  function AtomicString(value) {\n    classCallCheck(this, AtomicString);\n    if (value && !isString(value)) {\n      throw new Error('OSC AtomicString constructor expects value of type string');\n    }\n    return possibleConstructorReturn(this, (AtomicString.__proto__ || Object.getPrototypeOf(AtomicString)).call(this, value));\n  }\n  createClass(AtomicString, [{\n    key: 'pack',\n    value: function pack() {\n      if (isUndefined(this.value)) {\n        throw new Error('OSC AtomicString can not be encoded with empty value');\n      }\n      var terminated = this.value + '\\0';\n      var byteLength = pad(terminated.length);\n      var buffer = new Uint8Array(byteLength);\n      for (var i = 0; i < terminated.length; i += 1) {\n        buffer[i] = terminated.charCodeAt(i);\n      }\n      return buffer;\n    }\n  }, {\n    key: 'unpack',\n    value: function unpack(dataView$$1) {\n      var initialOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (!(dataView$$1 instanceof DataView)) {\n        throw new Error('OSC AtomicString expects an instance of type DataView');\n      }\n      var offset = initialOffset;\n      var charcode = void 0;\n      var charCodes = [];\n      for (; offset < dataView$$1.byteLength; offset += 1) {\n        charcode = dataView$$1.getUint8(offset);\n        if (charcode !== 0) {\n          charCodes.push(charcode);\n        } else {\n          offset += 1;\n          break;\n        }\n      }\n      if (offset === dataView$$1.length) {\n        throw new Error('OSC AtomicString found a malformed OSC string');\n      }\n      this.offset = pad(offset);\n      this.value = charCodesToString(charCodes);\n      return this.offset;\n    }\n  }]);\n  return AtomicString;\n}(Atomic);\n\nvar AtomicBlob = function (_Atomic) {\n  inherits(AtomicBlob, _Atomic);\n  function AtomicBlob(value) {\n    classCallCheck(this, AtomicBlob);\n    if (value && !isBlob(value)) {\n      throw new Error('OSC AtomicBlob constructor expects value of type Uint8Array');\n    }\n    return possibleConstructorReturn(this, (AtomicBlob.__proto__ || Object.getPrototypeOf(AtomicBlob)).call(this, value));\n  }\n  createClass(AtomicBlob, [{\n    key: 'pack',\n    value: function pack() {\n      if (isUndefined(this.value)) {\n        throw new Error('OSC AtomicBlob can not be encoded with empty value');\n      }\n      var byteLength = pad(this.value.byteLength);\n      var data = new Uint8Array(byteLength + 4);\n      var dataView$$1 = new DataView(data.buffer);\n      dataView$$1.setInt32(0, this.value.byteLength, false);\n      data.set(this.value, 4);\n      return data;\n    }\n  }, {\n    key: 'unpack',\n    value: function unpack(dataView$$1) {\n      var initialOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (!(dataView$$1 instanceof DataView)) {\n        throw new Error('OSC AtomicBlob expects an instance of type DataView');\n      }\n      var byteLength = dataView$$1.getInt32(initialOffset, false);\n      this.value = new Uint8Array(dataView$$1.buffer, initialOffset + 4, byteLength);\n      this.offset = pad(initialOffset + 4 + byteLength);\n      return this.offset;\n    }\n  }]);\n  return AtomicBlob;\n}(Atomic);\n\nvar Message = function () {\n  function Message() {\n    classCallCheck(this, Message);\n    this.offset = 0;\n    this.address = '';\n    this.types = '';\n    this.args = [];\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length > 0) {\n      if (!(isString(args[0]) || isArray(args[0]))) {\n        throw new Error('OSC Message constructor first argument (address) must be a string or array');\n      }\n      this.address = prepareAddress(args.shift());\n      this.types = args.map(function (item) {\n        return typeTag(item);\n      }).join('');\n      this.args = args;\n    }\n  }\n  createClass(Message, [{\n    key: 'add',\n    value: function add(item) {\n      if (isUndefined(item)) {\n        throw new Error('OSC Message needs a valid OSC Atomic Data Type');\n      }\n      this.args.push(item);\n      this.types += typeTag(item);\n    }\n  }, {\n    key: 'pack',\n    value: function pack() {\n      if (this.address.length === 0 || this.address[0] !== '/') {\n        throw new Error('OSC Message has an invalid address');\n      }\n      var encoder = new EncodeHelper();\n      encoder.add(new AtomicString(this.address));\n      encoder.add(new AtomicString(',' + this.types));\n      if (this.args.length > 0) {\n        var argument = void 0;\n        this.args.forEach(function (value) {\n          if (isInt(value)) {\n            argument = new AtomicInt32(value);\n          } else if (isFloat(value)) {\n            argument = new AtomicFloat32(value);\n          } else if (isString(value)) {\n            argument = new AtomicString(value);\n          } else if (isBlob(value)) {\n            argument = new AtomicBlob(value);\n          } else {\n            throw new Error('OSC Message found unknown argument type');\n          }\n          encoder.add(argument);\n        });\n      }\n      return encoder.merge();\n    }\n  }, {\n    key: 'unpack',\n    value: function unpack(dataView$$1) {\n      var initialOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (!(dataView$$1 instanceof DataView)) {\n        throw new Error('OSC Message expects an instance of type DataView.');\n      }\n      var address = new AtomicString();\n      address.unpack(dataView$$1, initialOffset);\n      var types = new AtomicString();\n      types.unpack(dataView$$1, address.offset);\n      if (address.value.length === 0 || address.value[0] !== '/') {\n        throw new Error('OSC Message found malformed or missing address string');\n      }\n      if (types.value.length === 0 && types.value[0] !== ',') {\n        throw new Error('OSC Message found malformed or missing type string');\n      }\n      var offset = types.offset;\n      var next = void 0;\n      var type = void 0;\n      var args = [];\n      for (var i = 1; i < types.value.length; i += 1) {\n        type = types.value[i];\n        if (type === 'i') {\n          next = new AtomicInt32();\n        } else if (type === 'f') {\n          next = new AtomicFloat32();\n        } else if (type === 's') {\n          next = new AtomicString();\n        } else if (type === 'b') {\n          next = new AtomicBlob();\n        } else {\n          throw new Error('OSC Message found non-standard argument type');\n        }\n        offset = next.unpack(dataView$$1, offset);\n        args.push(next.value);\n      }\n      this.offset = offset;\n      this.address = address.value;\n      this.types = types.value;\n      this.args = args;\n      return this.offset;\n    }\n  }]);\n  return Message;\n}();\n\nvar SECONDS_70_YEARS = 2208988800;\nvar TWO_POWER_32 = 4294967296;\nvar Timetag = function () {\n  function Timetag() {\n    var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var fractions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    classCallCheck(this, Timetag);\n    if (!(isInt(seconds) && isInt(fractions))) {\n      throw new Error('OSC Timetag constructor expects values of type integer number');\n    }\n    this.seconds = seconds;\n    this.fractions = fractions;\n  }\n  createClass(Timetag, [{\n    key: 'timestamp',\n    value: function timestamp(milliseconds) {\n      var seconds = void 0;\n      if (typeof milliseconds === 'number') {\n        seconds = milliseconds / 1000;\n        var rounded = Math.floor(seconds);\n        this.seconds = rounded + SECONDS_70_YEARS;\n        this.fractions = Math.round(TWO_POWER_32 * (seconds - rounded));\n        return milliseconds;\n      }\n      seconds = this.seconds - SECONDS_70_YEARS;\n      return (seconds + Math.round(this.fractions / TWO_POWER_32)) * 1000;\n    }\n  }]);\n  return Timetag;\n}();\nvar AtomicTimetag = function (_Atomic) {\n  inherits(AtomicTimetag, _Atomic);\n  function AtomicTimetag() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    classCallCheck(this, AtomicTimetag);\n    var timetag = new Timetag();\n    if (value instanceof Timetag) {\n      timetag = value;\n    } else if (isInt(value)) {\n      timetag.timestamp(value);\n    } else if (isDate(value)) {\n      timetag.timestamp(value.getTime());\n    }\n    return possibleConstructorReturn(this, (AtomicTimetag.__proto__ || Object.getPrototypeOf(AtomicTimetag)).call(this, timetag));\n  }\n  createClass(AtomicTimetag, [{\n    key: 'pack',\n    value: function pack() {\n      if (isUndefined(this.value)) {\n        throw new Error('OSC AtomicTimetag can not be encoded with empty value');\n      }\n      var _value = this.value,\n          seconds = _value.seconds,\n          fractions = _value.fractions;\n      var data = new Uint8Array(8);\n      var dataView$$1 = new DataView(data.buffer);\n      dataView$$1.setInt32(0, seconds, false);\n      dataView$$1.setInt32(4, fractions, false);\n      return data;\n    }\n  }, {\n    key: 'unpack',\n    value: function unpack(dataView$$1) {\n      var initialOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (!(dataView$$1 instanceof DataView)) {\n        throw new Error('OSC AtomicTimetag expects an instance of type DataView');\n      }\n      var seconds = dataView$$1.getUint32(initialOffset, false);\n      var fractions = dataView$$1.getUint32(initialOffset + 4, false);\n      this.value = new Timetag(seconds, fractions);\n      this.offset = initialOffset + 8;\n      return this.offset;\n    }\n  }]);\n  return AtomicTimetag;\n}(Atomic);\n\nvar BUNDLE_TAG = '#bundle';\nvar Bundle = function () {\n  function Bundle() {\n    var _this = this;\n    classCallCheck(this, Bundle);\n    this.offset = 0;\n    this.timetag = new AtomicTimetag();\n    this.bundleElements = [];\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length > 0) {\n      if (args[0] instanceof Date || isInt(args[0])) {\n        this.timetag = new AtomicTimetag(args[0]);\n      } else if (isArray(args[0])) {\n        args[0].forEach(function (item) {\n          _this.add(item);\n        });\n        if (args.length > 1 && (args[1] instanceof Date || isInt(args[0]))) {\n          this.timetag = new AtomicTimetag(args[1]);\n        }\n      } else {\n        args.forEach(function (item) {\n          _this.add(item);\n        });\n      }\n    }\n  }\n  createClass(Bundle, [{\n    key: 'timestamp',\n    value: function timestamp(ms) {\n      if (!isInt(ms)) {\n        throw new Error('OSC Bundle needs an integer for setting the timestamp');\n      }\n      this.timetag = new AtomicTimetag(ms);\n    }\n  }, {\n    key: 'add',\n    value: function add(item) {\n      if (!(item instanceof Message || item instanceof Bundle)) {\n        throw new Error('OSC Bundle contains only Messages and Bundles');\n      }\n      this.bundleElements.push(item);\n    }\n  }, {\n    key: 'pack',\n    value: function pack() {\n      var encoder = new EncodeHelper();\n      encoder.add(new AtomicString(BUNDLE_TAG));\n      if (!this.timetag) {\n        this.timetag = new AtomicTimetag();\n      }\n      encoder.add(this.timetag);\n      this.bundleElements.forEach(function (item) {\n        encoder.add(new AtomicInt32(item.pack().byteLength));\n        encoder.add(item);\n      });\n      return encoder.merge();\n    }\n  }, {\n    key: 'unpack',\n    value: function unpack(dataView$$1) {\n      var initialOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (!(dataView$$1 instanceof DataView)) {\n        throw new Error('OSC Bundle expects an instance of type DataView');\n      }\n      var head = new AtomicString();\n      head.unpack(dataView$$1, initialOffset);\n      if (head.value !== BUNDLE_TAG) {\n        throw new Error('OSC Bundle does not contain a valid #bundle head');\n      }\n      var timetag = new AtomicTimetag();\n      var offset = timetag.unpack(dataView$$1, head.offset);\n      this.bundleElements = [];\n      while (offset < dataView$$1.byteLength) {\n        var packet = new Packet();\n        var size = new AtomicInt32();\n        offset = size.unpack(dataView$$1, offset);\n        offset = packet.unpack(dataView$$1, offset, this.timetag);\n        this.bundleElements.push(packet.value);\n      }\n      this.offset = offset;\n      this.timetag = timetag;\n      return this.offset;\n    }\n  }]);\n  return Bundle;\n}();\n\nvar Packet = function () {\n  function Packet(value) {\n    classCallCheck(this, Packet);\n    if (value && !(value instanceof Message || value instanceof Bundle)) {\n      throw new Error('OSC Packet value has to be Message or Bundle');\n    }\n    this.value = value;\n    this.offset = 0;\n  }\n  createClass(Packet, [{\n    key: 'pack',\n    value: function pack() {\n      if (!this.value) {\n        throw new Error('OSC Packet can not be encoded with empty body');\n      }\n      return this.value.pack();\n    }\n  }, {\n    key: 'unpack',\n    value: function unpack(dataView) {\n      var initialOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (!(dataView instanceof DataView)) {\n        throw new Error('OSC Packet expects an instance of type DataView');\n      }\n      if (dataView.byteLength % 4 !== 0) {\n        throw new Error('OSC Packet byteLength has to be a multiple of four');\n      }\n      var head = new AtomicString();\n      head.unpack(dataView, initialOffset);\n      var item = void 0;\n      if (head.value === BUNDLE_TAG) {\n        item = new Bundle();\n      } else {\n        item = new Message();\n      }\n      item.unpack(dataView, initialOffset);\n      this.offset = item.offset;\n      this.value = item;\n      return this.offset;\n    }\n  }]);\n  return Packet;\n}();\n\nvar defaultOptions = {\n  discardLateMessages: false\n};\nvar EventHandler = function () {\n  function EventHandler(options) {\n    classCallCheck(this, EventHandler);\n    this.options = Object.assign({}, defaultOptions, options);\n    this.addressHandlers = [];\n    this.eventHandlers = {\n      open: [],\n      error: [],\n      close: []\n    };this.uuid = 0;\n  }\n  createClass(EventHandler, [{\n    key: 'dispatch',\n    value: function dispatch(packet) {\n      var _this = this;\n      if (!(packet instanceof Packet)) {\n        throw new Error('OSC EventHander dispatch() accepts only arguments of type Packet');\n      }\n      if (!packet.value) {\n        throw new Error('OSC EventHander dispatch() can\\'t read empty Packets');\n      }\n      if (packet.value instanceof Bundle) {\n        var bundle = packet.value;\n        return bundle.bundleElements.forEach(function (bundleItem) {\n          if (bundleItem instanceof Bundle) {\n            if (bundle.timetag.value.timestamp() < bundleItem.timetag.value.timestamp()) {\n              throw new Error('OSC Bundle timestamp is older than the timestamp of enclosed Bundles');\n            }\n            return _this.dispatch(bundleItem);\n          } else if (bundleItem instanceof Message) {\n            var message = bundleItem;\n            return _this.notify(message.address, message, bundle.timetag.value.timestamp());\n          }\n          throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value');\n        });\n      } else if (packet.value instanceof Message) {\n        var message = packet.value;\n        return this.notify(message.address, message);\n      }\n      throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value');\n    }\n  }, {\n    key: 'call',\n    value: function call(name, data) {\n      var success = false;\n      if (isString(name) && name in this.eventHandlers) {\n        this.eventHandlers[name].forEach(function (handler) {\n          handler.callback(data);\n          success = true;\n        });\n        return success;\n      }\n      var handlerKeys = Object.keys(this.addressHandlers);\n      var handlers = this.addressHandlers;\n      handlerKeys.forEach(function (key) {\n        var regex = new RegExp(prepareRegExPattern(prepareAddress(name)), 'g');\n        var test = regex.test(key);\n        if (test && key.length === regex.lastIndex) {\n          handlers[key].forEach(function (handler) {\n            handler.callback(data);\n            success = true;\n          });\n        }\n      });\n      return success;\n    }\n  }, {\n    key: 'notify',\n    value: function notify() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      if (args.length === 0) {\n        throw new Error('OSC EventHandler can not be called without any argument');\n      }\n      if (args[0] instanceof Packet) {\n        return this.dispatch(args[0]);\n      } else if (args[0] instanceof Bundle || args[0] instanceof Message) {\n        return this.dispatch(new Packet(args[0]));\n      } else if (!isString(args[0])) {\n        var packet = new Packet();\n        packet.unpack(dataView(args[0]));\n        return this.dispatch(packet);\n      }\n      var name = args[0];\n      var data = null;\n      if (args.length > 1) {\n        data = args[1];\n      }\n      var timestamp = null;\n      if (args.length > 2) {\n        if (isInt(args[2])) {\n          timestamp = args[2];\n        } else if (args[2] instanceof Date) {\n          timestamp = args[2].getTime();\n        } else {\n          throw new Error('OSC EventHandler timestamp has to be a number or Date');\n        }\n      }\n      if (timestamp) {\n        var now = Date.now();\n        if (now > timestamp) {\n          if (!this.options.discardLateMessages) {\n            return this.call(name, data);\n          }\n        }\n        var that = this;\n        setTimeout(function () {\n          that.call(name, data);\n        }, timestamp - now);\n        return true;\n      }\n      return this.call(name, data);\n    }\n  }, {\n    key: 'on',\n    value: function on(name, callback) {\n      if (!(isString(name) || isArray(name))) {\n        throw new Error('OSC EventHandler accepts only strings or arrays for address patterns');\n      }\n      if (!isFunction(callback)) {\n        throw new Error('OSC EventHandler callback has to be a function');\n      }\n      this.uuid += 1;\n      var handler = {\n        id: this.uuid,\n        callback: callback\n      };if (isString(name) && name in this.eventHandlers) {\n        this.eventHandlers[name].push(handler);\n        return this.uuid;\n      }\n      var address = prepareAddress(name);\n      var regex = new RegExp(/[#*\\s[\\],/{}|?]/g);\n      if (regex.test(address.split('/').join(''))) {\n        throw new Error('OSC EventHandler address string contains invalid characters');\n      }\n      if (!(address in this.addressHandlers)) {\n        this.addressHandlers[address] = [];\n      }\n      this.addressHandlers[address].push(handler);\n      return this.uuid;\n    }\n  }, {\n    key: 'off',\n    value: function off(name, subscriptionId) {\n      if (!(isString(name) || isArray(name))) {\n        throw new Error('OSC EventHandler accepts only strings or arrays for address patterns');\n      }\n      if (!isInt(subscriptionId)) {\n        throw new Error('OSC EventHandler subscription id has to be a number');\n      }\n      var key = void 0;\n      var haystack = void 0;\n      if (isString(name) && name in this.eventHandlers) {\n        key = name;\n        haystack = this.eventHandlers;\n      } else {\n        key = prepareAddress(name);\n        haystack = this.addressHandlers;\n      }\n      if (key in haystack) {\n        return haystack[key].some(function (item, index) {\n          if (item.id === subscriptionId) {\n            haystack[key].splice(index, 1);\n            return true;\n          }\n          return false;\n        });\n      }\n      return false;\n    }\n  }]);\n  return EventHandler;\n}();\n\nvar defaultOptions$1 = {\n  plugin: null,\n  discardLateMessages: false\n};var STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3\n};\nvar OSC = function () {\n  function OSC(options) {\n    classCallCheck(this, OSC);\n    if (options && !isObject(options)) {\n      throw new Error('OSC options argument has to be an object.');\n    }\n    this.options = Object.assign({}, defaultOptions$1, options);\n    this.eventHandler = new EventHandler({\n      discardLateMessages: this.options.discardLateMessages\n    });\n    var eventHandler = this.eventHandler;\n    if (this.options.plugin && this.options.plugin.registerNotify) {\n      this.options.plugin.registerNotify(function () {\n        return eventHandler.notify.apply(eventHandler, arguments);\n      });\n    }\n  }\n  createClass(OSC, [{\n    key: 'on',\n    value: function on(eventName, callback) {\n      if (!(isString(eventName) && isFunction(callback))) {\n        throw new Error('OSC on() needs event- or address string and callback function');\n      }\n      return this.eventHandler.on(eventName, callback);\n    }\n  }, {\n    key: 'off',\n    value: function off(eventName, subscriptionId) {\n      if (!(isString(eventName) && isInt(subscriptionId))) {\n        throw new Error('OSC off() needs string and number (subscriptionId) to unsubscribe');\n      }\n      return this.eventHandler.off(eventName, subscriptionId);\n    }\n  }, {\n    key: 'open',\n    value: function open(options) {\n      if (options && !isObject(options)) {\n        throw new Error('OSC open() options argument needs to be an object');\n      }\n      if (!(this.options.plugin && isFunction(this.options.plugin.open))) {\n        throw new Error('OSC Plugin API #open is not implemented!');\n      }\n      return this.options.plugin.open(options);\n    }\n  }, {\n    key: 'status',\n    value: function status() {\n      if (!(this.options.plugin && isFunction(this.options.plugin.status))) {\n        throw new Error('OSC Plugin API #status is not implemented!');\n      }\n      return this.options.plugin.status();\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      if (!(this.options.plugin && isFunction(this.options.plugin.close))) {\n        throw new Error('OSC Plugin API #close is not implemented!');\n      }\n      return this.options.plugin.close();\n    }\n  }, {\n    key: 'send',\n    value: function send(packet, options) {\n      if (!(this.options.plugin && isFunction(this.options.plugin.send))) {\n        throw new Error('OSC Plugin API #send is not implemented!');\n      }\n      if (!(packet instanceof Message || packet instanceof Bundle || packet instanceof Packet)) {\n        throw new Error('OSC send() needs Messages, Bundles or Packets');\n      }\n      if (options && !isObject(options)) {\n        throw new Error('OSC send() options argument has to be an object');\n      }\n      return this.options.plugin.send(packet.pack(), options);\n    }\n  }]);\n  return OSC;\n}();\nOSC.STATUS = STATUS;\nOSC.Packet = Packet;\nOSC.Bundle = Bundle;\nOSC.Message = Message;\n\nvar STATUS$1 = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3\n};var defaultOptions$2 = {\n  host: 'localhost',\n  port: 8080,\n  secure: false\n};\nvar WebsocketBrowserPlugin = function () {\n  function WebsocketBrowserPlugin(customOptions) {\n    classCallCheck(this, WebsocketBrowserPlugin);\n    if (!hasProperty('WebSocket')) {\n      throw new Error('WebsocketBrowserPlugin can\\'t find a WebSocket class');\n    }\n    this.options = Object.assign({}, defaultOptions$2, customOptions);\n    this.socket = null;\n    this.socketStatus = STATUS$1.IS_NOT_INITIALIZED;\n    this.notify = function () {};\n  }\n  createClass(WebsocketBrowserPlugin, [{\n    key: 'registerNotify',\n    value: function registerNotify(fn) {\n      this.notify = fn;\n    }\n  }, {\n    key: 'status',\n    value: function status() {\n      return this.socketStatus;\n    }\n  }, {\n    key: 'open',\n    value: function open() {\n      var _this = this;\n      var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = Object.assign({}, this.options, customOptions);\n      var port = options.port,\n          host = options.host,\n          secure = options.secure;\n      if (this.socket) {\n        this.close();\n      }\n      var protocol = secure ? 'wss' : 'ws';\n      this.socket = new WebSocket(protocol + '://' + host + ':' + port);\n      this.socket.binaryType = 'arraybuffer';\n      this.socketStatus = STATUS$1.IS_CONNECTING;\n      this.socket.onopen = function () {\n        _this.socketStatus = STATUS$1.IS_OPEN;\n        _this.notify('open');\n      };\n      this.socket.onclose = function () {\n        _this.socketStatus = STATUS$1.IS_CLOSED;\n        _this.notify('close');\n      };\n      this.socket.onerror = function (error) {\n        _this.notify('error', error);\n      };\n      this.socket.onmessage = function (message) {\n        _this.notify(message.data);\n      };\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      this.socketStatus = STATUS$1.IS_CLOSING;\n      this.socket.close();\n    }\n  }, {\n    key: 'send',\n    value: function send(binary) {\n      this.socket.send(binary);\n    }\n  }]);\n  return WebsocketBrowserPlugin;\n}();\n\nvar defaultOptions$3 = {\n  plugin: new WebsocketBrowserPlugin()\n};\nvar OSC$1 = function (_OSCBase) {\n  inherits(OSC$$1, _OSCBase);\n  function OSC$$1(options) {\n    classCallCheck(this, OSC$$1);\n    return possibleConstructorReturn(this, (OSC$$1.__proto__ || Object.getPrototypeOf(OSC$$1)).call(this, Object.assign({}, defaultOptions$3, options)));\n  }\n  return OSC$$1;\n}(OSC);\nOSC$1.WebsocketBrowserPlugin = WebsocketBrowserPlugin;\n\nreturn OSC$1;\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./node_modules/osc-js/lib/osc.browser.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nvar _audioSystem = _interopRequireDefault(__webpack_require__(/*! ./audio/audio-system */ \"./src/audio/audio-system.js\"));\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ./audio/glottis */ \"./src/audio/glottis.js\"));\n\nvar _tract = _interopRequireDefault(__webpack_require__(/*! ./audio/tract */ \"./src/audio/tract.js\"));\n\nvar _ui = _interopRequireDefault(__webpack_require__(/*! ./ui/ui */ \"./src/ui/ui.js\"));\n\nvar _tractUi = _interopRequireDefault(__webpack_require__(/*! ./ui/tract-ui */ \"./src/ui/tract-ui.js\"));\n\nvar _api = _interopRequireDefault(__webpack_require__(/*! ./osc/api */ \"./src/osc/api.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// globals\nwindow.time = 0;\nwindow.sampleRate = 441000;\nwindow.autoWobble = false;\nwindow.alwaysVoice = false;\nwindow.palePink = \"#FFEEF5\";\n\nMath.clamp = function (number, min, max) {\n  if (number < min) return min;else if (number > max) return max;else return number;\n};\n\nMath.moveTowards = function (current, target, amount) {\n  if (current < target) return Math.min(current + amount, target);else return Math.max(current - amount, target);\n};\n\nMath.moveTowards = function (current, target, amountUp, amountDown) {\n  if (current < target) return Math.min(current + amountUp, target);else return Math.max(current - amountDown, target);\n};\n\nMath.gaussian = function () {\n  var s = 0;\n\n  for (var c = 0; c < 16; c++) {\n    s += Math.random();\n  }\n\n  return (s - 8) / 4;\n};\n\nvar noiseFreq = 500;\nvar noiseQ = 0.7;\nvar isFirefox = false;\nvar browser = navigator.userAgent.toLowerCase();\nif (browser.indexOf('firefox') > -1) isFirefox = true;\ndocument.body.style.cursor = 'pointer';\n\n_audioSystem.default.init();\n\n_ui.default.init();\n\n_glottis.default.init();\n\n_tract.default.init();\n\n_tractUi.default.init();\n\n_api.default.init();\n\nrequestAnimationFrame(redraw);\n\nfunction redraw(highResTimestamp) {\n  _ui.default.shapeToFitScreen();\n\n  _tractUi.default.draw();\n\n  _ui.default.draw();\n\n  requestAnimationFrame(redraw);\n  time = Date.now() / 1000;\n\n  _ui.default.updateTouches();\n}\n/**********************************************************************************/\n\n/**********************************************************************************/\n\n/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n// (function (global) {\n\n\nvar _module = global.noise = {};\n\nfunction Grad(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n}\n\nGrad.prototype.dot2 = function (x, y) {\n  return this.x * x + this.y * y;\n};\n\nGrad.prototype.dot3 = function (x, y, z) {\n  return this.x * x + this.y * y + this.z * z;\n};\n\nvar grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\nvar p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]; // To remove the need for index wrapping, double the permutation table length\n\nvar perm = new Array(512);\nvar gradP = new Array(512); // This isn't a very good seeding function, but it works ok. It supports 2^16\n// different seed values. Write something better if you need more seeds.\n\n_module.seed = function (seed) {\n  if (seed > 0 && seed < 1) {\n    // Scale the seed out\n    seed *= 65536;\n  }\n\n  seed = Math.floor(seed);\n\n  if (seed < 256) {\n    seed |= seed << 8;\n  }\n\n  for (var i = 0; i < 256; i++) {\n    var v;\n\n    if (i & 1) {\n      v = p[i] ^ seed & 255;\n    } else {\n      v = p[i] ^ seed >> 8 & 255;\n    }\n\n    perm[i] = perm[i + 256] = v;\n    gradP[i] = gradP[i + 256] = grad3[v % 12];\n  }\n};\n\n_module.seed(Date.now());\n/*\nfor(var i=0; i<256; i++) {\n  perm[i] = perm[i + 256] = p[i];\n  gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n}*/\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\n\n\nvar F2 = 0.5 * (Math.sqrt(3) - 1);\nvar G2 = (3 - Math.sqrt(3)) / 6;\nvar F3 = 1 / 3;\nvar G3 = 1 / 6; // 2D simplex noise\n\n_module.simplex2 = function (xin, yin) {\n  var n0, n1, n2; // Noise contributions from the three corners\n  // Skew the input space to determine which simplex cell we're in\n\n  var s = (xin + yin) * F2; // Hairy factor for 2D\n\n  var i = Math.floor(xin + s);\n  var j = Math.floor(yin + s);\n  var t = (i + j) * G2;\n  var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n  var y0 = yin - j + t; // For the 2D case, the simplex shape is an equilateral triangle.\n  // Determine which simplex we are in.\n\n  var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n  if (x0 > y0) {\n    // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    i1 = 1;\n    j1 = 0;\n  } else {\n    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    i1 = 0;\n    j1 = 1;\n  } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n  // c = (3-sqrt(3))/6\n\n\n  var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n  var y1 = y0 - j1 + G2;\n  var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n  var y2 = y0 - 1 + 2 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n  i &= 255;\n  j &= 255;\n  var gi0 = gradP[i + perm[j]];\n  var gi1 = gradP[i + i1 + perm[j + j1]];\n  var gi2 = gradP[i + 1 + perm[j + 1]]; // Calculate the contribution from the three corners\n\n  var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n  if (t0 < 0) {\n    n0 = 0;\n  } else {\n    t0 *= t0;\n    n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n  }\n\n  var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n  if (t1 < 0) {\n    n1 = 0;\n  } else {\n    t1 *= t1;\n    n1 = t1 * t1 * gi1.dot2(x1, y1);\n  }\n\n  var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n  if (t2 < 0) {\n    n2 = 0;\n  } else {\n    t2 *= t2;\n    n2 = t2 * t2 * gi2.dot2(x2, y2);\n  } // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n\n\n  return 70 * (n0 + n1 + n2);\n};\n\n_module.simplex1 = function (x) {\n  return _module.simplex2(x * 1.2, -x * 0.7);\n}; // })(this);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./src/app.js?");

/***/ }),

/***/ "./src/audio/audio-system.js":
/*!***********************************!*\
  !*** ./src/audio/audio-system.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ./glottis */ \"./src/audio/glottis.js\"));\n\nvar _tract = _interopRequireDefault(__webpack_require__(/*! ./tract */ \"./src/audio/tract.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AudioSystem = {\n  blockLength: 512,\n  blockTime: 1,\n  started: false,\n  soundOn: false,\n  init: function init() {\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    this.audioContext = new window.AudioContext();\n    sampleRate = this.audioContext.sampleRate;\n    this.blockTime = this.blockLength / sampleRate;\n  },\n  startSound: function startSound() {\n    //scriptProcessor may need a dummy input channel on iOS\n    this.scriptProcessor = this.audioContext.createScriptProcessor(this.blockLength, 2, 1);\n    this.scriptProcessor.connect(this.audioContext.destination);\n    this.scriptProcessor.onaudioprocess = AudioSystem.doScriptProcessor;\n    var whiteNoise = this.createWhiteNoiseNode(2 * sampleRate); // 2 seconds of noise\n\n    var aspirateFilter = this.audioContext.createBiquadFilter();\n    aspirateFilter.type = \"bandpass\";\n    aspirateFilter.frequency.value = 500;\n    aspirateFilter.Q.value = 0.5;\n    whiteNoise.connect(aspirateFilter);\n    aspirateFilter.connect(this.scriptProcessor);\n    var fricativeFilter = this.audioContext.createBiquadFilter();\n    fricativeFilter.type = \"bandpass\";\n    fricativeFilter.frequency.value = 1000;\n    fricativeFilter.Q.value = 0.5;\n    whiteNoise.connect(fricativeFilter);\n    fricativeFilter.connect(this.scriptProcessor);\n    whiteNoise.start(0);\n  },\n  createWhiteNoiseNode: function createWhiteNoiseNode(frameCount) {\n    var myArrayBuffer = this.audioContext.createBuffer(1, frameCount, sampleRate);\n    var nowBuffering = myArrayBuffer.getChannelData(0);\n\n    for (var i = 0; i < frameCount; i++) {\n      nowBuffering[i] = Math.random(); // gaussian();\n    }\n\n    var source = this.audioContext.createBufferSource();\n    source.buffer = myArrayBuffer;\n    source.loop = true;\n    return source;\n  },\n  doScriptProcessor: function doScriptProcessor(event) {\n    var inputArray1 = event.inputBuffer.getChannelData(0);\n    var inputArray2 = event.inputBuffer.getChannelData(1);\n    var outArray = event.outputBuffer.getChannelData(0);\n\n    for (var j = 0, N = outArray.length; j < N; j++) {\n      var lambda1 = j / N;\n      var lambda2 = (j + 0.5) / N;\n\n      var glottalOutput = _glottis.default.runStep(lambda1, inputArray1[j]);\n\n      var vocalOutput = 0; //Tract runs at twice the sample rate \n\n      _tract.default.runStep(glottalOutput, inputArray2[j], lambda1);\n\n      vocalOutput += _tract.default.lipOutput + _tract.default.noseOutput;\n\n      _tract.default.runStep(glottalOutput, inputArray2[j], lambda2);\n\n      vocalOutput += _tract.default.lipOutput + _tract.default.noseOutput;\n      outArray[j] = vocalOutput * 0.125;\n    }\n\n    _glottis.default.finishBlock();\n\n    _tract.default.finishBlock();\n  },\n  mute: function mute() {\n    this.scriptProcessor.disconnect();\n  },\n  unmute: function unmute() {\n    this.scriptProcessor.connect(this.audioContext.destination);\n  }\n};\nvar _default = AudioSystem;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/audio/audio-system.js?");

/***/ }),

/***/ "./src/audio/glottis.js":
/*!******************************!*\
  !*** ./src/audio/glottis.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ui = _interopRequireDefault(__webpack_require__(/*! ../ui/ui */ \"./src/ui/ui.js\"));\n\nvar _api = _interopRequireDefault(__webpack_require__(/*! ../osc/api */ \"./src/osc/api.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar backCanvas = document.getElementById(\"backCanvas\");\nvar backCtx = backCanvas.getContext(\"2d\");\nvar Glottis = {\n  timeInWaveform: 0,\n  oldFrequency: 140,\n  newFrequency: 140,\n  UIFrequency: 140,\n  smoothFrequency: 140,\n  oldTenseness: 0.6,\n  newTenseness: 0.6,\n  UITenseness: 0.6,\n  totalTime: 0,\n  vibratoAmount: 0.005,\n  vibratoFrequency: 6,\n  intensity: 0,\n  loudness: 1,\n  isTouched: false,\n  ctx: backCtx,\n  touch: 0,\n  x: 240,\n  y: 530,\n  keyboardTop: 500,\n  keyboardLeft: 0,\n  keyboardWidth: 600,\n  keyboardHeight: 100,\n  semitones: 20,\n  marks: [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\n  baseNote: 87.3071,\n  //F\n  init: function init() {\n    this.setupWaveform(0);\n    this.drawKeyboard();\n  },\n  drawKeyboard: function drawKeyboard() {\n    this.ctx.strokeStyle = palePink;\n    this.ctx.fillStyle = palePink;\n    backCtx.globalAlpha = 1.0;\n    backCtx.lineCap = 'round';\n    backCtx.lineJoin = 'round';\n    var radius = 2;\n    this.drawBar(0.0, 0.4, 8);\n    backCtx.globalAlpha = 0.7;\n    this.drawBar(0.52, 0.72, 8);\n    backCtx.strokeStyle = \"orchid\";\n    backCtx.fillStyle = \"orchid\";\n\n    for (var i = 0; i < this.semitones; i++) {\n      var keyWidth = this.keyboardWidth / this.semitones;\n      var x = this.keyboardLeft + (i + 1 / 2) * keyWidth;\n      var y = this.keyboardTop;\n\n      if (this.marks[(i + 3) % 12] == 1) {\n        backCtx.lineWidth = 4;\n        backCtx.globalAlpha = 0.4;\n      } else {\n        backCtx.lineWidth = 3;\n        backCtx.globalAlpha = 0.2;\n      }\n\n      backCtx.beginPath();\n      backCtx.moveTo(x, y + 9);\n      backCtx.lineTo(x, y + this.keyboardHeight * 0.4 - 9);\n      backCtx.stroke();\n      backCtx.lineWidth = 3;\n      backCtx.globalAlpha = 0.15;\n      backCtx.beginPath();\n      backCtx.moveTo(x, y + this.keyboardHeight * 0.52 + 6);\n      backCtx.lineTo(x, y + this.keyboardHeight * 0.72 - 6);\n      backCtx.stroke();\n    }\n\n    backCtx.fillStyle = \"orchid\";\n    backCtx.font = \"17px Arial\";\n    backCtx.textAlign = \"center\";\n    backCtx.globalAlpha = 0.7;\n    backCtx.fillText(\"voicebox control\", 300, 490);\n    backCtx.fillText(\"pitch\", 300, 592);\n    backCtx.globalAlpha = 0.3;\n    backCtx.strokeStyle = \"orchid\";\n    backCtx.fillStyle = \"orchid\";\n    backCtx.save();\n    backCtx.translate(410, 587);\n    this.drawArrow(80, 2, 10);\n    backCtx.translate(-220, 0);\n    backCtx.rotate(Math.PI);\n    this.drawArrow(80, 2, 10);\n    backCtx.restore();\n    backCtx.globalAlpha = 1.0;\n  },\n  drawBar: function drawBar(topFactor, bottomFactor, radius) {\n    backCtx.lineWidth = radius * 2;\n    backCtx.beginPath();\n    backCtx.moveTo(this.keyboardLeft + radius, this.keyboardTop + topFactor * this.keyboardHeight + radius);\n    backCtx.lineTo(this.keyboardLeft + this.keyboardWidth - radius, this.keyboardTop + topFactor * this.keyboardHeight + radius);\n    backCtx.lineTo(this.keyboardLeft + this.keyboardWidth - radius, this.keyboardTop + bottomFactor * this.keyboardHeight - radius);\n    backCtx.lineTo(this.keyboardLeft + radius, this.keyboardTop + bottomFactor * this.keyboardHeight - radius);\n    backCtx.closePath();\n    backCtx.stroke();\n    backCtx.fill();\n  },\n  drawArrow: function drawArrow(l, ahw, ahl) {\n    backCtx.lineWidth = 2;\n    backCtx.beginPath();\n    backCtx.moveTo(-l, 0);\n    backCtx.lineTo(0, 0);\n    backCtx.lineTo(0, -ahw);\n    backCtx.lineTo(ahl, 0);\n    backCtx.lineTo(0, ahw);\n    backCtx.lineTo(0, 0);\n    backCtx.closePath();\n    backCtx.stroke();\n    backCtx.fill();\n  },\n  handleTouches: function handleTouches() {\n    if (this.touch != 0 && !this.touch.alive) this.touch = 0;\n\n    if (this.touch == 0) {\n      for (var j = 0; j < _ui.default.touchesWithMouse.length; j++) {\n        var touch = _ui.default.touchesWithMouse[j];\n        if (!touch.alive) continue;\n        if (touch.y < this.keyboardTop) continue;\n        this.touch = touch;\n      }\n    }\n\n    if (this.touch != 0) {\n      var local_y = this.touch.y - this.keyboardTop - 10;\n      var local_x = this.touch.x - this.keyboardLeft;\n      local_y = Math.clamp(local_y, 0, this.keyboardHeight - 26);\n      var semitone = this.semitones * local_x / this.keyboardWidth + 0.5;\n      Glottis.UIFrequency = this.baseNote * Math.pow(2, semitone / 12);\n      if (Glottis.intensity == 0) Glottis.smoothFrequency = Glottis.UIFrequency; //Glottis.UIRd = 3*local_y / (this.keyboardHeight-20);\n\n      var t = Math.clamp(1 - local_y / (this.keyboardHeight - 28), 0, 1);\n      Glottis.UITenseness = 1 - Math.cos(t * Math.PI * 0.5);\n      Glottis.loudness = Math.pow(Glottis.UITenseness, 0.25);\n      this.x = this.touch.x;\n      this.y = local_y + this.keyboardTop + 10;\n    }\n\n    Glottis.isTouched = this.touch != 0;\n  },\n  handleOSC: function handleOSC() {\n    var semitone = _api.default.glottis.semitone;\n    Glottis.UIFrequency = this.baseNote * Math.pow(2, semitone / 12);\n    Glottis.UITenseness = _api.default.glottis.tenseness;\n    Glottis.loudness = _api.default.glottis.loudness;\n    Glottis.vibratoAmount = _api.default.glottis.vibratoAmount;\n    Glottis.vibratoFrequency = _api.default.glottis.vibratoFrequency;\n  },\n  runStep: function runStep(lambda, noiseSource) {\n    var timeStep = 1.0 / sampleRate;\n    this.timeInWaveform += timeStep;\n    this.totalTime += timeStep;\n\n    if (this.timeInWaveform > this.waveformLength) {\n      this.timeInWaveform -= this.waveformLength;\n      this.setupWaveform(lambda);\n    }\n\n    var out = this.normalizedLFWaveform(this.timeInWaveform / this.waveformLength);\n    var aspiration = this.intensity * (1 - Math.sqrt(this.UITenseness)) * this.getNoiseModulator() * noiseSource;\n    aspiration *= 0.2 + 0.02 * noise.simplex1(this.totalTime * 1.99);\n    out += aspiration;\n    return out;\n  },\n  getNoiseModulator: function getNoiseModulator() {\n    var voiced = 0.1 + 0.2 * Math.max(0, Math.sin(Math.PI * 2 * this.timeInWaveform / this.waveformLength)); //return 0.3;\n\n    return this.UITenseness * this.intensity * voiced + (1 - this.UITenseness * this.intensity) * 0.3;\n  },\n  finishBlock: function finishBlock() {\n    var vibrato = 0;\n    vibrato += this.vibratoAmount * Math.sin(2 * Math.PI * this.totalTime * this.vibratoFrequency);\n    vibrato += 0.02 * noise.simplex1(this.totalTime * 4.07);\n    vibrato += 0.04 * noise.simplex1(this.totalTime * 2.15);\n\n    if (autoWobble) {\n      vibrato += 0.2 * noise.simplex1(this.totalTime * 0.98);\n      vibrato += 0.4 * noise.simplex1(this.totalTime * 0.5);\n    }\n\n    if (this.UIFrequency > this.smoothFrequency) this.smoothFrequency = Math.min(this.smoothFrequency * 1.1, this.UIFrequency);\n    if (this.UIFrequency < this.smoothFrequency) this.smoothFrequency = Math.max(this.smoothFrequency / 1.1, this.UIFrequency);\n    this.oldFrequency = this.newFrequency;\n    this.newFrequency = this.smoothFrequency * (1 + vibrato);\n    this.oldTenseness = this.newTenseness;\n    this.newTenseness = this.UITenseness + 0.1 * noise.simplex1(this.totalTime * 0.46) + 0.05 * noise.simplex1(this.totalTime * 0.36);\n    if (!this.isTouched && alwaysVoice) this.newTenseness += (3 - this.UITenseness) * (1 - this.intensity);\n    if (this.isTouched || alwaysVoice) this.intensity += 0.13;else this.intensity -= 0.05;\n    this.intensity = Math.clamp(this.intensity, 0, 1);\n  },\n  setupWaveform: function setupWaveform(lambda) {\n    this.frequency = this.oldFrequency * (1 - lambda) + this.newFrequency * lambda;\n    var tenseness = this.oldTenseness * (1 - lambda) + this.newTenseness * lambda;\n    this.Rd = 3 * (1 - tenseness);\n    this.waveformLength = 1.0 / this.frequency;\n    var Rd = this.Rd;\n    if (Rd < 0.5) Rd = 0.5;\n    if (Rd > 2.7) Rd = 2.7;\n    var output; // normalized to time = 1, Ee = 1\n\n    var Ra = -0.01 + 0.048 * Rd;\n    var Rk = 0.224 + 0.118 * Rd;\n    var Rg = Rk / 4 * (0.5 + 1.2 * Rk) / (0.11 * Rd - Ra * (0.5 + 1.2 * Rk));\n    var Ta = Ra;\n    var Tp = 1 / (2 * Rg);\n    var Te = Tp + Tp * Rk; //\n\n    var epsilon = 1 / Ta;\n    var shift = Math.exp(-epsilon * (1 - Te));\n    var Delta = 1 - shift; //divide by this to scale RHS\n\n    var RHSIntegral = 1 / epsilon * (shift - 1) + (1 - Te) * shift;\n    RHSIntegral = RHSIntegral / Delta;\n    var totalLowerIntegral = -(Te - Tp) / 2 + RHSIntegral;\n    var totalUpperIntegral = -totalLowerIntegral;\n    var omega = Math.PI / Tp;\n    var s = Math.sin(omega * Te); // need E0*e^(alpha*Te)*s = -1 (to meet the return at -1)\n    // and E0*e^(alpha*Tp/2) * Tp*2/pi = totalUpperIntegral \n    //             (our approximation of the integral up to Tp)\n    // writing x for e^alpha,\n    // have E0*x^Te*s = -1 and E0 * x^(Tp/2) * Tp*2/pi = totalUpperIntegral\n    // dividing the second by the first,\n    // letting y = x^(Tp/2 - Te),\n    // y * Tp*2 / (pi*s) = -totalUpperIntegral;\n\n    var y = -Math.PI * s * totalUpperIntegral / (Tp * 2);\n    var z = Math.log(y);\n    var alpha = z / (Tp / 2 - Te);\n    var E0 = -1 / (s * Math.exp(alpha * Te));\n    this.alpha = alpha;\n    this.E0 = E0;\n    this.epsilon = epsilon;\n    this.shift = shift;\n    this.Delta = Delta;\n    this.Te = Te;\n    this.omega = omega;\n  },\n  normalizedLFWaveform: function normalizedLFWaveform(t) {\n    var output;\n    if (t > this.Te) output = (-Math.exp(-this.epsilon * (t - this.Te)) + this.shift) / this.Delta;else output = this.E0 * Math.exp(this.alpha * t) * Math.sin(this.omega * t);\n    return output * this.intensity * this.loudness;\n  }\n};\nvar _default = Glottis;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/audio/glottis.js?");

/***/ }),

/***/ "./src/audio/tract.js":
/*!****************************!*\
  !*** ./src/audio/tract.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _audioSystem = _interopRequireDefault(__webpack_require__(/*! ./audio-system */ \"./src/audio/audio-system.js\"));\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ./glottis */ \"./src/audio/glottis.js\"));\n\nvar _ui = _interopRequireDefault(__webpack_require__(/*! ../ui/ui */ \"./src/ui/ui.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Tract = {\n  n: 44,\n  bladeStart: 10,\n  tipStart: 32,\n  lipStart: 39,\n  R: [],\n  //component going right\n  L: [],\n  //component going left\n  reflection: [],\n  junctionOutputR: [],\n  junctionOutputL: [],\n  maxAmplitude: [],\n  diameter: [],\n  restDiameter: [],\n  targetDiameter: [],\n  newDiameter: [],\n  A: [],\n  glottalReflection: 0.75,\n  lipReflection: -0.85,\n  lastObstruction: -1,\n  fade: 1.0,\n  //0.9999,\n  movementSpeed: 15,\n  //cm per second\n  transients: [],\n  lipOutput: 0,\n  noseOutput: 0,\n  velumTarget: 0.01,\n  init: function init() {\n    this.bladeStart = Math.floor(this.bladeStart * this.n / 44);\n    this.tipStart = Math.floor(this.tipStart * this.n / 44);\n    this.lipStart = Math.floor(this.lipStart * this.n / 44);\n    this.diameter = new Float64Array(this.n);\n    this.restDiameter = new Float64Array(this.n);\n    this.targetDiameter = new Float64Array(this.n);\n    this.newDiameter = new Float64Array(this.n);\n\n    for (var i = 0; i < this.n; i++) {\n      var diameter = 0;\n      if (i < 7 * this.n / 44 - 0.5) diameter = 0.6;else if (i < 12 * this.n / 44) diameter = 1.1;else diameter = 1.5;\n      this.diameter[i] = this.restDiameter[i] = this.targetDiameter[i] = this.newDiameter[i] = diameter;\n    }\n\n    this.R = new Float64Array(this.n);\n    this.L = new Float64Array(this.n);\n    this.reflection = new Float64Array(this.n + 1);\n    this.newReflection = new Float64Array(this.n + 1);\n    this.junctionOutputR = new Float64Array(this.n + 1);\n    this.junctionOutputL = new Float64Array(this.n + 1);\n    this.A = new Float64Array(this.n);\n    this.maxAmplitude = new Float64Array(this.n);\n    this.noseLength = Math.floor(28 * this.n / 44);\n    this.noseStart = this.n - this.noseLength + 1;\n    this.noseR = new Float64Array(this.noseLength);\n    this.noseL = new Float64Array(this.noseLength);\n    this.noseJunctionOutputR = new Float64Array(this.noseLength + 1);\n    this.noseJunctionOutputL = new Float64Array(this.noseLength + 1);\n    this.noseReflection = new Float64Array(this.noseLength + 1);\n    this.noseDiameter = new Float64Array(this.noseLength);\n    this.noseA = new Float64Array(this.noseLength);\n    this.noseMaxAmplitude = new Float64Array(this.noseLength);\n\n    for (var i = 0; i < this.noseLength; i++) {\n      var diameter;\n      var d = 2 * (i / this.noseLength);\n      if (d < 1) diameter = 0.4 + 1.6 * d;else diameter = 0.5 + 1.5 * (2 - d);\n      diameter = Math.min(diameter, 1.9);\n      this.noseDiameter[i] = diameter;\n    }\n\n    this.newReflectionLeft = this.newReflectionRight = this.newReflectionNose = 0;\n    this.calculateReflections();\n    this.calculateNoseReflections();\n    this.noseDiameter[0] = this.velumTarget;\n  },\n  reshapeTract: function reshapeTract(deltaTime) {\n    var amount = deltaTime * this.movementSpeed;\n    ;\n    var newLastObstruction = -1;\n\n    for (var i = 0; i < this.n; i++) {\n      var diameter = this.diameter[i];\n      var targetDiameter = this.targetDiameter[i];\n      if (diameter <= 0) newLastObstruction = i;\n      var slowReturn;\n      if (i < this.noseStart) slowReturn = 0.6;else if (i >= this.tipStart) slowReturn = 1.0;else slowReturn = 0.6 + 0.4 * (i - this.noseStart) / (this.tipStart - this.noseStart);\n      this.diameter[i] = Math.moveTowards(diameter, targetDiameter, slowReturn * amount, 2 * amount);\n    }\n\n    if (this.lastObstruction > -1 && newLastObstruction == -1 && this.noseA[0] < 0.05) {\n      this.addTransient(this.lastObstruction);\n    }\n\n    this.lastObstruction = newLastObstruction;\n    amount = deltaTime * this.movementSpeed;\n    this.noseDiameter[0] = Math.moveTowards(this.noseDiameter[0], this.velumTarget, amount * 0.25, amount * 0.1);\n    this.noseA[0] = this.noseDiameter[0] * this.noseDiameter[0];\n  },\n  calculateReflections: function calculateReflections() {\n    for (var i = 0; i < this.n; i++) {\n      this.A[i] = this.diameter[i] * this.diameter[i]; //ignoring PI etc.\n    }\n\n    for (var i = 1; i < this.n; i++) {\n      this.reflection[i] = this.newReflection[i];\n      if (this.A[i] == 0) this.newReflection[i] = 0.999; //to prevent some bad behaviour if 0\n      else this.newReflection[i] = (this.A[i - 1] - this.A[i]) / (this.A[i - 1] + this.A[i]);\n    } //now at junction with nose\n\n\n    this.reflectionLeft = this.newReflectionLeft;\n    this.reflectionRight = this.newReflectionRight;\n    this.reflectionNose = this.newReflectionNose;\n    var sum = this.A[this.noseStart] + this.A[this.noseStart + 1] + this.noseA[0];\n    this.newReflectionLeft = (2 * this.A[this.noseStart] - sum) / sum;\n    this.newReflectionRight = (2 * this.A[this.noseStart + 1] - sum) / sum;\n    this.newReflectionNose = (2 * this.noseA[0] - sum) / sum;\n  },\n  calculateNoseReflections: function calculateNoseReflections() {\n    for (var i = 0; i < this.noseLength; i++) {\n      this.noseA[i] = this.noseDiameter[i] * this.noseDiameter[i];\n    }\n\n    for (var i = 1; i < this.noseLength; i++) {\n      this.noseReflection[i] = (this.noseA[i - 1] - this.noseA[i]) / (this.noseA[i - 1] + this.noseA[i]);\n    }\n  },\n  runStep: function runStep(glottalOutput, turbulenceNoise, lambda) {\n    var updateAmplitudes = Math.random() < 0.1; //mouth\n\n    this.processTransients();\n    this.addTurbulenceNoise(turbulenceNoise); //this.glottalReflection = -0.8 + 1.6 * Glottis.newTenseness;\n\n    this.junctionOutputR[0] = this.L[0] * this.glottalReflection + glottalOutput;\n    this.junctionOutputL[this.n] = this.R[this.n - 1] * this.lipReflection;\n\n    for (var i = 1; i < this.n; i++) {\n      var r = this.reflection[i] * (1 - lambda) + this.newReflection[i] * lambda;\n      var w = r * (this.R[i - 1] + this.L[i]);\n      this.junctionOutputR[i] = this.R[i - 1] - w;\n      this.junctionOutputL[i] = this.L[i] + w;\n    } //now at junction with nose\n\n\n    var i = this.noseStart;\n    var r = this.newReflectionLeft * (1 - lambda) + this.reflectionLeft * lambda;\n    this.junctionOutputL[i] = r * this.R[i - 1] + (1 + r) * (this.noseL[0] + this.L[i]);\n    r = this.newReflectionRight * (1 - lambda) + this.reflectionRight * lambda;\n    this.junctionOutputR[i] = r * this.L[i] + (1 + r) * (this.R[i - 1] + this.noseL[0]);\n    r = this.newReflectionNose * (1 - lambda) + this.reflectionNose * lambda;\n    this.noseJunctionOutputR[0] = r * this.noseL[0] + (1 + r) * (this.L[i] + this.R[i - 1]);\n\n    for (var i = 0; i < this.n; i++) {\n      this.R[i] = this.junctionOutputR[i] * 0.999;\n      this.L[i] = this.junctionOutputL[i + 1] * 0.999; //this.R[i] = Math.clamp(this.junctionOutputR[i] * this.fade, -1, 1);\n      //this.L[i] = Math.clamp(this.junctionOutputL[i+1] * this.fade, -1, 1);    \n\n      if (updateAmplitudes) {\n        var amplitude = Math.abs(this.R[i] + this.L[i]);\n        if (amplitude > this.maxAmplitude[i]) this.maxAmplitude[i] = amplitude;else this.maxAmplitude[i] *= 0.999;\n      }\n    }\n\n    this.lipOutput = this.R[this.n - 1]; //nose     \n\n    this.noseJunctionOutputL[this.noseLength] = this.noseR[this.noseLength - 1] * this.lipReflection;\n\n    for (var i = 1; i < this.noseLength; i++) {\n      var w = this.noseReflection[i] * (this.noseR[i - 1] + this.noseL[i]);\n      this.noseJunctionOutputR[i] = this.noseR[i - 1] - w;\n      this.noseJunctionOutputL[i] = this.noseL[i] + w;\n    }\n\n    for (var i = 0; i < this.noseLength; i++) {\n      this.noseR[i] = this.noseJunctionOutputR[i] * this.fade;\n      this.noseL[i] = this.noseJunctionOutputL[i + 1] * this.fade; //this.noseR[i] = Math.clamp(this.noseJunctionOutputR[i] * this.fade, -1, 1);\n      //this.noseL[i] = Math.clamp(this.noseJunctionOutputL[i+1] * this.fade, -1, 1);    \n\n      if (updateAmplitudes) {\n        var amplitude = Math.abs(this.noseR[i] + this.noseL[i]);\n        if (amplitude > this.noseMaxAmplitude[i]) this.noseMaxAmplitude[i] = amplitude;else this.noseMaxAmplitude[i] *= 0.999;\n      }\n    }\n\n    this.noseOutput = this.noseR[this.noseLength - 1];\n  },\n  finishBlock: function finishBlock() {\n    this.reshapeTract(_audioSystem.default.blockTime);\n    this.calculateReflections();\n  },\n  addTransient: function addTransient(position) {\n    var trans = {};\n    trans.position = position;\n    trans.timeAlive = 0;\n    trans.lifeTime = 0.2;\n    trans.strength = 0.3;\n    trans.exponent = 200;\n    this.transients.push(trans);\n  },\n  processTransients: function processTransients() {\n    for (var i = 0; i < this.transients.length; i++) {\n      var trans = this.transients[i];\n      var amplitude = trans.strength * Math.pow(2, -trans.exponent * trans.timeAlive);\n      this.R[trans.position] += amplitude / 2;\n      this.L[trans.position] += amplitude / 2;\n      trans.timeAlive += 1.0 / (sampleRate * 2);\n    }\n\n    for (var i = this.transients.length - 1; i >= 0; i--) {\n      var trans = this.transients[i];\n\n      if (trans.timeAlive > trans.lifeTime) {\n        this.transients.splice(i, 1);\n      }\n    }\n  },\n  addTurbulenceNoise: function addTurbulenceNoise(turbulenceNoise) {\n    for (var j = 0; j < _ui.default.touchesWithMouse.length; j++) {\n      var touch = _ui.default.touchesWithMouse[j];\n      if (touch.index < 2 || touch.index > Tract.n) continue;\n      if (touch.diameter <= 0) continue;\n      var intensity = touch.fricative_intensity;\n      if (intensity == 0) continue;\n      this.addTurbulenceNoiseAtIndex(0.66 * turbulenceNoise * intensity, touch.index, touch.diameter);\n    }\n  },\n  addTurbulenceNoiseAtIndex: function addTurbulenceNoiseAtIndex(turbulenceNoise, index, diameter) {\n    var i = Math.floor(index);\n    var delta = index - i;\n    turbulenceNoise *= _glottis.default.getNoiseModulator();\n    var thinness0 = Math.clamp(8 * (0.7 - diameter), 0, 1);\n    var openness = Math.clamp(30 * (diameter - 0.3), 0, 1);\n    var noise0 = turbulenceNoise * (1 - delta) * thinness0 * openness;\n    var noise1 = turbulenceNoise * delta * thinness0 * openness;\n    this.R[i + 1] += noise0 / 2;\n    this.L[i + 1] += noise0 / 2;\n    this.R[i + 2] += noise1 / 2;\n    this.L[i + 2] += noise1 / 2;\n  }\n};\nvar _default = Tract;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/audio/tract.js?");

/***/ }),

/***/ "./src/osc/api.js":
/*!************************!*\
  !*** ./src/osc/api.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar OSC = __webpack_require__(/*! osc-js */ \"./node_modules/osc-js/lib/osc.browser.js\");\n\nvar OSCAPI = {\n  osc: new OSC(),\n  init: function init() {\n    var _this = this;\n\n    this.osc.open({\n      port: 9000\n    });\n    this.bindGlottis();\n\n    window.onunload = function () {\n      _this.osc.close({\n        port: 9000\n      });\n\n      return true;\n    };\n  },\n  bindGlottis: function bindGlottis() {\n    var _this2 = this;\n\n    this.osc.on('/glottis', function (message) {\n      var key = message.args[0];\n      var val = message.args[1];\n      _this2.glottis[key] = val;\n    });\n  },\n  glottis: {},\n  tract: {}\n};\nvar _default = OSCAPI;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/osc/api.js?");

/***/ }),

/***/ "./src/ui/tract-ui.js":
/*!****************************!*\
  !*** ./src/ui/tract-ui.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tract = _interopRequireDefault(__webpack_require__(/*! ../audio/tract */ \"./src/audio/tract.js\"));\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ../audio/glottis */ \"./src/audio/glottis.js\"));\n\nvar _ui = _interopRequireDefault(__webpack_require__(/*! ./ui */ \"./src/ui/ui.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar tractCanvas = document.getElementById(\"tractCanvas\");\nvar tractCtx = tractCanvas.getContext(\"2d\");\nvar backCanvas = document.getElementById(\"backCanvas\");\nvar backCtx = backCanvas.getContext(\"2d\");\nvar temp = {\n  a: 0,\n  b: 0\n};\nvar TractUI = {\n  originX: 340,\n  originY: 449,\n  radius: 298,\n  scale: 60,\n  tongueIndex: 12.9,\n  tongueDiameter: 2.43,\n  innerTongueControlRadius: 2.05,\n  outerTongueControlRadius: 3.5,\n  tongueTouch: 0,\n  angleScale: 0.64,\n  angleOffset: -0.24,\n  noseOffset: 0.8,\n  gridOffset: 1.7,\n  fillColour: 'pink',\n  lineColour: '#C070C6',\n  init: function init() {\n    this.ctx = tractCtx;\n    this.setRestDiameter();\n\n    for (var i = 0; i < _tract.default.n; i++) {\n      _tract.default.diameter[i] = _tract.default.targetDiameter[i] = _tract.default.restDiameter[i];\n    }\n\n    this.drawBackground();\n    this.tongueLowerIndexBound = _tract.default.bladeStart + 2;\n    this.tongueUpperIndexBound = _tract.default.tipStart - 3;\n    this.tongueIndexCentre = 0.5 * (this.tongueLowerIndexBound + this.tongueUpperIndexBound);\n  },\n  moveTo: function moveTo(i, d) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var wobble = _tract.default.maxAmplitude[_tract.default.n - 1] + _tract.default.noseMaxAmplitude[_tract.default.noseLength - 1];\n    wobble *= 0.03 * Math.sin(2 * i - 50 * time) * i / _tract.default.n;\n    angle += wobble;\n    var r = this.radius - this.scale * d + 100 * wobble;\n    this.ctx.moveTo(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle));\n  },\n  lineTo: function lineTo(i, d) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var wobble = _tract.default.maxAmplitude[_tract.default.n - 1] + _tract.default.noseMaxAmplitude[_tract.default.noseLength - 1];\n    wobble *= 0.03 * Math.sin(2 * i - 50 * time) * i / _tract.default.n;\n    angle += wobble;\n    var r = this.radius - this.scale * d + 100 * wobble;\n    this.ctx.lineTo(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle));\n  },\n  drawText: function drawText(i, d, text) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var r = this.radius - this.scale * d;\n    this.ctx.save();\n    this.ctx.translate(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle) + 2); //+8);\n\n    this.ctx.rotate(angle - Math.PI / 2);\n    this.ctx.fillText(text, 0, 0);\n    this.ctx.restore();\n  },\n  drawTextStraight: function drawTextStraight(i, d, text) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var r = this.radius - this.scale * d;\n    this.ctx.save();\n    this.ctx.translate(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle) + 2); //+8);\n    //this.ctx.rotate(angle-Math.PI/2);\n\n    this.ctx.fillText(text, 0, 0);\n    this.ctx.restore();\n  },\n  drawCircle: function drawCircle(i, d, radius) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var r = this.radius - this.scale * d;\n    this.ctx.beginPath();\n    this.ctx.arc(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle), radius, 0, 2 * Math.PI);\n    this.ctx.fill();\n  },\n  getIndex: function getIndex(x, y) {\n    var xx = x - this.originX;\n    var yy = y - this.originY;\n    var angle = Math.atan2(yy, xx);\n\n    while (angle > 0) {\n      angle -= 2 * Math.PI;\n    }\n\n    return (Math.PI + angle - this.angleOffset) * (_tract.default.lipStart - 1) / (this.angleScale * Math.PI);\n  },\n  getDiameter: function getDiameter(x, y) {\n    var xx = x - this.originX;\n    var yy = y - this.originY;\n    return (this.radius - Math.sqrt(xx * xx + yy * yy)) / this.scale;\n  },\n  draw: function draw() {\n    this.ctx.clearRect(0, 0, tractCanvas.width, tractCanvas.height);\n    this.ctx.lineCap = 'round';\n    this.ctx.lineJoin = 'round';\n    this.drawTongueControl();\n    this.drawPitchControl();\n    var velum = _tract.default.noseDiameter[0];\n    var velumAngle = velum * 4; //first draw fill\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeStyle = this.fillColour;\n    this.ctx.fillStyle = this.fillColour;\n    this.moveTo(1, 0);\n\n    for (var i = 1; i < _tract.default.n; i++) {\n      this.lineTo(i, _tract.default.diameter[i]);\n    }\n\n    for (var i = _tract.default.n - 1; i >= 2; i--) {\n      this.lineTo(i, 0);\n    }\n\n    this.ctx.closePath();\n    this.ctx.stroke();\n    this.ctx.fill(); //for nose\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeStyle = this.fillColour;\n    this.ctx.fillStyle = this.fillColour;\n    this.moveTo(_tract.default.noseStart, -this.noseOffset);\n\n    for (var i = 1; i < _tract.default.noseLength; i++) {\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset - _tract.default.noseDiameter[i] * 0.9);\n    }\n\n    for (var i = _tract.default.noseLength - 1; i >= 1; i--) {\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset);\n    }\n\n    this.ctx.closePath(); //this.ctx.stroke();\n\n    this.ctx.fill(); //velum\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeStyle = this.fillColour;\n    this.ctx.fillStyle = this.fillColour;\n    this.moveTo(_tract.default.noseStart - 2, 0);\n    this.lineTo(_tract.default.noseStart, -this.noseOffset);\n    this.lineTo(_tract.default.noseStart + velumAngle, -this.noseOffset);\n    this.lineTo(_tract.default.noseStart + velumAngle - 2, 0);\n    this.ctx.closePath();\n    this.ctx.stroke();\n    this.ctx.fill(); //white text\n\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = \"20px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.globalAlpha = 1.0;\n    this.drawText(_tract.default.n * 0.10, 0.425, \"throat\");\n    this.drawText(_tract.default.n * 0.71, -1.8, \"nasal\");\n    this.drawText(_tract.default.n * 0.71, -1.3, \"cavity\");\n    this.ctx.font = \"22px Arial\";\n    this.drawText(_tract.default.n * 0.6, 0.9, \"oral\");\n    this.drawText(_tract.default.n * 0.7, 0.9, \"cavity\");\n    this.drawAmplitudes(); //then draw lines\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 5;\n    this.ctx.strokeStyle = this.lineColour;\n    this.ctx.lineJoin = 'round';\n    this.ctx.lineCap = 'round';\n    this.moveTo(1, _tract.default.diameter[0]);\n\n    for (var i = 2; i < _tract.default.n; i++) {\n      this.lineTo(i, _tract.default.diameter[i]);\n    }\n\n    this.moveTo(1, 0);\n\n    for (var i = 2; i <= _tract.default.noseStart - 2; i++) {\n      this.lineTo(i, 0);\n    }\n\n    this.moveTo(_tract.default.noseStart + velumAngle - 2, 0);\n\n    for (var i = _tract.default.noseStart + Math.ceil(velumAngle) - 2; i < _tract.default.n; i++) {\n      this.lineTo(i, 0);\n    }\n\n    this.ctx.stroke(); //for nose\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 5;\n    this.ctx.strokeStyle = this.lineColour;\n    this.ctx.lineJoin = 'round';\n    this.moveTo(_tract.default.noseStart, -this.noseOffset);\n\n    for (var i = 1; i < _tract.default.noseLength; i++) {\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset - _tract.default.noseDiameter[i] * 0.9);\n    }\n\n    this.moveTo(_tract.default.noseStart + velumAngle, -this.noseOffset);\n\n    for (var i = Math.ceil(velumAngle); i < _tract.default.noseLength; i++) {\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset);\n    }\n\n    this.ctx.stroke(); //velum\n\n    this.ctx.globalAlpha = velum * 5;\n    this.ctx.beginPath();\n    this.moveTo(_tract.default.noseStart - 2, 0);\n    this.lineTo(_tract.default.noseStart, -this.noseOffset);\n    this.moveTo(_tract.default.noseStart + velumAngle - 2, 0);\n    this.lineTo(_tract.default.noseStart + velumAngle, -this.noseOffset);\n    this.ctx.stroke();\n    this.ctx.fillStyle = \"orchid\";\n    this.ctx.font = \"20px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.globalAlpha = 0.7;\n    this.drawText(_tract.default.n * 0.95, 0.8 + 0.8 * _tract.default.diameter[_tract.default.n - 1], \" lip\");\n    this.ctx.globalAlpha = 1.0;\n    this.ctx.fillStyle = \"black\";\n    this.ctx.textAlign = \"left\";\n    this.ctx.fillText(_ui.default.debugText, 20, 20); //this.drawPositions();\n  },\n  drawBackground: function drawBackground() {\n    this.ctx = backCtx; //text\n\n    this.ctx.fillStyle = \"orchid\";\n    this.ctx.font = \"20px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.globalAlpha = 0.7;\n    this.drawText(_tract.default.n * 0.44, -0.28, \"soft\");\n    this.drawText(_tract.default.n * 0.51, -0.28, \"palate\");\n    this.drawText(_tract.default.n * 0.77, -0.28, \"hard\");\n    this.drawText(_tract.default.n * 0.84, -0.28, \"palate\");\n    this.drawText(_tract.default.n * 0.95, -0.28, \" lip\");\n    this.ctx.font = \"17px Arial\";\n    this.drawTextStraight(_tract.default.n * 0.18, 3, \"  tongue control\");\n    this.ctx.textAlign = \"left\";\n    this.drawText(_tract.default.n * 1.03, -1.07, \"nasals\");\n    this.drawText(_tract.default.n * 1.03, -0.28, \"stops\");\n    this.drawText(_tract.default.n * 1.03, 0.51, \"fricatives\"); //this.drawTextStraight(1.5, +0.8, \"glottis\")\n\n    this.ctx.strokeStyle = \"orchid\";\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.moveTo(_tract.default.n * 1.03, 0);\n    this.lineTo(_tract.default.n * 1.07, 0);\n    this.moveTo(_tract.default.n * 1.03, -this.noseOffset);\n    this.lineTo(_tract.default.n * 1.07, -this.noseOffset);\n    this.ctx.stroke();\n    this.ctx.globalAlpha = 0.9;\n    this.ctx.globalAlpha = 1.0;\n    this.ctx = tractCtx;\n  },\n  drawPositions: function drawPositions() {\n    this.ctx.fillStyle = \"orchid\";\n    this.ctx.font = \"24px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.globalAlpha = 0.6;\n    var a = 2;\n    var b = 1.5;\n    this.drawText(15, a + b * 0.60, 'æ'); //pat\n\n    this.drawText(13, a + b * 0.27, 'ɑ'); //part\n\n    this.drawText(12, a + b * 0.00, 'ɒ'); //pot\n\n    this.drawText(17.7, a + b * 0.05, '(ɔ)'); //port (rounded)\n\n    this.drawText(27, a + b * 0.65, 'ɪ'); //pit\n\n    this.drawText(27.4, a + b * 0.21, 'i'); //peat\n\n    this.drawText(20, a + b * 1.00, 'e'); //pet\n\n    this.drawText(18.1, a + b * 0.37, 'ʌ'); //putt   \n    //put ʊ\n\n    this.drawText(23, a + b * 0.1, '(u)'); //poot (rounded)   \n\n    this.drawText(21, a + b * 0.6, 'ə'); //pert [should be ɜ]\n\n    var nasals = -1.1;\n    var stops = -0.4;\n    var fricatives = 0.3;\n    var approximants = 1.1;\n    this.ctx.globalAlpha = 0.8; //approximants\n\n    this.drawText(38, approximants, 'l');\n    this.drawText(41, approximants, 'w'); //?\n\n    this.drawText(4.5, 0.37, 'h');\n\n    if (_glottis.default.isTouched || alwaysVoice) {\n      //voiced consonants\n      this.drawText(31.5, fricatives, 'ʒ');\n      this.drawText(36, fricatives, 'z');\n      this.drawText(41, fricatives, 'v');\n      this.drawText(22, stops, 'g');\n      this.drawText(36, stops, 'd');\n      this.drawText(41, stops, 'b');\n      this.drawText(22, nasals, 'ŋ');\n      this.drawText(36, nasals, 'n');\n      this.drawText(41, nasals, 'm');\n    } else {\n      //unvoiced consonants\n      this.drawText(31.5, fricatives, 'ʃ');\n      this.drawText(36, fricatives, 's');\n      this.drawText(41, fricatives, 'f');\n      this.drawText(22, stops, 'k');\n      this.drawText(36, stops, 't');\n      this.drawText(41, stops, 'p');\n      this.drawText(22, nasals, 'ŋ');\n      this.drawText(36, nasals, 'n');\n      this.drawText(41, nasals, 'm');\n    }\n  },\n  drawAmplitudes: function drawAmplitudes() {\n    this.ctx.strokeStyle = \"orchid\";\n    this.ctx.lineCap = \"butt\";\n    this.ctx.globalAlpha = 0.3;\n\n    for (var i = 2; i < _tract.default.n - 1; i++) {\n      this.ctx.beginPath();\n      this.ctx.lineWidth = Math.sqrt(_tract.default.maxAmplitude[i]) * 3;\n      this.moveTo(i, 0);\n      this.lineTo(i, _tract.default.diameter[i]);\n      this.ctx.stroke();\n    }\n\n    for (var i = 1; i < _tract.default.noseLength - 1; i++) {\n      this.ctx.beginPath();\n      this.ctx.lineWidth = Math.sqrt(_tract.default.noseMaxAmplitude[i]) * 3;\n      this.moveTo(i + _tract.default.noseStart, -this.noseOffset);\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset - _tract.default.noseDiameter[i] * 0.9);\n      this.ctx.stroke();\n    }\n\n    this.ctx.globalAlpha = 1;\n  },\n  drawTongueControl: function drawTongueControl() {\n    this.ctx.lineCap = \"round\";\n    this.ctx.lineJoin = \"round\";\n    this.ctx.strokeStyle = palePink;\n    this.ctx.fillStyle = palePink;\n    this.ctx.globalAlpha = 1.0;\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 45; //outline\n\n    this.moveTo(this.tongueLowerIndexBound, this.innerTongueControlRadius);\n\n    for (var i = this.tongueLowerIndexBound + 1; i <= this.tongueUpperIndexBound; i++) {\n      this.lineTo(i, this.innerTongueControlRadius);\n    }\n\n    this.lineTo(this.tongueIndexCentre, this.outerTongueControlRadius);\n    this.ctx.closePath();\n    this.ctx.stroke();\n    this.ctx.fill();\n    var a = this.innerTongueControlRadius;\n    var c = this.outerTongueControlRadius;\n    var b = 0.5 * (a + c);\n    var r = 3;\n    this.ctx.fillStyle = \"orchid\";\n    this.ctx.globalAlpha = 0.3;\n    this.drawCircle(this.tongueIndexCentre, a, r);\n    this.drawCircle(this.tongueIndexCentre - 4.25, a, r);\n    this.drawCircle(this.tongueIndexCentre - 8.5, a, r);\n    this.drawCircle(this.tongueIndexCentre + 4.25, a, r);\n    this.drawCircle(this.tongueIndexCentre + 8.5, a, r);\n    this.drawCircle(this.tongueIndexCentre - 6.1, b, r);\n    this.drawCircle(this.tongueIndexCentre + 6.1, b, r);\n    this.drawCircle(this.tongueIndexCentre, b, r);\n    this.drawCircle(this.tongueIndexCentre, c, r);\n    this.ctx.globalAlpha = 1.0; //circle for tongue position\n\n    var angle = this.angleOffset + this.tongueIndex * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var r = this.radius - this.scale * this.tongueDiameter;\n    var x = this.originX - r * Math.cos(angle);\n    var y = this.originY - r * Math.sin(angle);\n    this.ctx.lineWidth = 4;\n    this.ctx.strokeStyle = \"orchid\";\n    this.ctx.globalAlpha = 0.7;\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, 18, 0, 2 * Math.PI);\n    this.ctx.stroke();\n    this.ctx.globalAlpha = 0.15;\n    this.ctx.fill();\n    this.ctx.globalAlpha = 1.0;\n    this.ctx.fillStyle = \"orchid\";\n  },\n  drawPitchControl: function drawPitchControl() {\n    var w = 9;\n    var h = 15;\n\n    if (_glottis.default.x) {\n      this.ctx.lineWidth = 4;\n      this.ctx.strokeStyle = \"orchid\";\n      this.ctx.globalAlpha = 0.7;\n      this.ctx.beginPath();\n      this.ctx.moveTo(_glottis.default.x - w, _glottis.default.y - h);\n      this.ctx.lineTo(_glottis.default.x + w, _glottis.default.y - h);\n      this.ctx.lineTo(_glottis.default.x + w, _glottis.default.y + h);\n      this.ctx.lineTo(_glottis.default.x - w, _glottis.default.y + h);\n      this.ctx.closePath();\n      this.ctx.stroke();\n      this.ctx.globalAlpha = 0.15;\n      this.ctx.fill();\n      this.ctx.globalAlpha = 1.0;\n    }\n  },\n  setRestDiameter: function setRestDiameter() {\n    for (var i = _tract.default.bladeStart; i < _tract.default.lipStart; i++) {\n      var t = 1.1 * Math.PI * (this.tongueIndex - i) / (_tract.default.tipStart - _tract.default.bladeStart);\n      var fixedTongueDiameter = 2 + (this.tongueDiameter - 2) / 1.5;\n      var curve = (1.5 - fixedTongueDiameter + this.gridOffset) * Math.cos(t);\n      if (i == _tract.default.bladeStart - 2 || i == _tract.default.lipStart - 1) curve *= 0.8;\n      if (i == _tract.default.bladeStart || i == _tract.default.lipStart - 2) curve *= 0.94;\n      _tract.default.restDiameter[i] = 1.5 - curve;\n    }\n  },\n  handleTouches: function handleTouches() {\n    if (this.tongueTouch != 0 && !this.tongueTouch.alive) this.tongueTouch = 0;\n\n    if (this.tongueTouch == 0) {\n      for (var j = 0; j < _ui.default.touchesWithMouse.length; j++) {\n        var touch = _ui.default.touchesWithMouse[j];\n        if (!touch.alive) continue;\n        if (touch.fricative_intensity == 1) continue; //only new touches will pass this\n\n        var x = touch.x;\n        var y = touch.y;\n        var index = TractUI.getIndex(x, y);\n        var diameter = TractUI.getDiameter(x, y);\n\n        if (index >= this.tongueLowerIndexBound - 4 && index <= this.tongueUpperIndexBound + 4 && diameter >= this.innerTongueControlRadius - 0.5 && diameter <= this.outerTongueControlRadius + 0.5) {\n          this.tongueTouch = touch;\n        }\n      }\n    }\n\n    if (this.tongueTouch != 0) {\n      var x = this.tongueTouch.x;\n      var y = this.tongueTouch.y;\n      var index = TractUI.getIndex(x, y);\n      var diameter = TractUI.getDiameter(x, y);\n      var fromPoint = (this.outerTongueControlRadius - diameter) / (this.outerTongueControlRadius - this.innerTongueControlRadius);\n      fromPoint = Math.clamp(fromPoint, 0, 1);\n      fromPoint = Math.pow(fromPoint, 0.58) - 0.2 * (fromPoint * fromPoint - fromPoint); //horrible kludge to fit curve to straight line\n\n      this.tongueDiameter = Math.clamp(diameter, this.innerTongueControlRadius, this.outerTongueControlRadius); //this.tongueIndex = Math.clamp(index, this.tongueLowerIndexBound, this.tongueUpperIndexBound);\n\n      var out = fromPoint * 0.5 * (this.tongueUpperIndexBound - this.tongueLowerIndexBound);\n      this.tongueIndex = Math.clamp(index, this.tongueIndexCentre - out, this.tongueIndexCentre + out);\n    }\n\n    this.setRestDiameter();\n\n    for (var i = 0; i < _tract.default.n; i++) {\n      _tract.default.targetDiameter[i] = _tract.default.restDiameter[i];\n    } //other constrictions and nose\n\n\n    _tract.default.velumTarget = 0.01;\n\n    for (var j = 0; j < _ui.default.touchesWithMouse.length; j++) {\n      var intIndex;\n      var touch = _ui.default.touchesWithMouse[j];\n      if (!touch.alive) continue;\n      var x = touch.x;\n      var y = touch.y;\n      var index = TractUI.getIndex(x, y);\n      var diameter = TractUI.getDiameter(x, y);\n\n      if (index > _tract.default.noseStart && diameter < -this.noseOffset) {\n        _tract.default.velumTarget = 0.4;\n      }\n\n      temp.a = index;\n      temp.b = diameter;\n      if (diameter < -0.85 - this.noseOffset) continue;\n      diameter -= 0.3;\n      if (diameter < 0) diameter = 0;\n      var width = 2;\n      if (index < 25) width = 10;else if (index >= _tract.default.tipStart) width = 5;else width = 10 - 5 * (index - 25) / (_tract.default.tipStart - 25);\n\n      if (index >= 2 && index < _tract.default.n && y < tractCanvas.height && diameter < 3) {\n        intIndex = Math.round(index);\n\n        for (var i = -Math.ceil(width) - 1; i < width + 1; i++) {\n          if (intIndex + i < 0 || intIndex + i >= _tract.default.n) continue;\n          var relpos = intIndex + i - index;\n          relpos = Math.abs(relpos) - 0.5;\n          var shrink;\n          if (relpos <= 0) shrink = 0;else if (relpos > width) shrink = 1;else shrink = 0.5 * (1 - Math.cos(Math.PI * relpos / width));\n\n          if (diameter < _tract.default.targetDiameter[intIndex + i]) {\n            _tract.default.targetDiameter[intIndex + i] = diameter + (_tract.default.targetDiameter[intIndex + i] - diameter) * shrink;\n          }\n        }\n      }\n    }\n  }\n};\nvar _default = TractUI;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/ui/tract-ui.js?");

/***/ }),

/***/ "./src/ui/ui.js":
/*!**********************!*\
  !*** ./src/ui/ui.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tractUi = _interopRequireDefault(__webpack_require__(/*! ./tract-ui */ \"./src/ui/tract-ui.js\"));\n\nvar _audioSystem = _interopRequireDefault(__webpack_require__(/*! ../audio/audio-system */ \"./src/audio/audio-system.js\"));\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ../audio/glottis */ \"./src/audio/glottis.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar tractCanvas = document.getElementById(\"tractCanvas\");\nvar tractCtx = tractCanvas.getContext(\"2d\");\n\nfunction makeButton(x, y, width, height, text, switchedOn) {\n  var button = {};\n  button.x = x;\n  button.y = y;\n  button.width = width;\n  button.height = height;\n  button.text = text;\n  button.switchedOn = switchedOn;\n\n  button.draw = function (ctx) {\n    var radius = 10;\n    ctx.strokeStyle = palePink;\n    ctx.fillStyle = palePink;\n    ctx.globalAlpha = 1.0;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = 2 * radius;\n    ctx.beginPath();\n    ctx.moveTo(this.x + radius, this.y + radius);\n    ctx.lineTo(this.x + this.width - radius, this.y + radius);\n    ctx.lineTo(this.x + this.width - radius, this.y + this.height - radius);\n    ctx.lineTo(this.x + radius, this.y + this.height - radius);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.fill();\n    ctx.font = \"16px Arial\";\n    ctx.textAlign = \"center\";\n\n    if (this.switchedOn) {\n      ctx.fillStyle = \"orchid\";\n      ctx.globalAlpha = 0.6;\n    } else {\n      ctx.fillStyle = \"white\";\n      ctx.globalAlpha = 1.0;\n    }\n\n    this.drawText(ctx);\n  };\n\n  button.drawText = function (ctx) {\n    ctx.fillText(this.text, this.x + this.width / 2, this.y + this.height / 2 + 6);\n  };\n\n  button.handleTouchStart = function (touch) {\n    if (touch.x >= this.x && touch.x <= this.x + this.width && touch.y >= this.y && touch.y <= this.y + this.height) {\n      this.switchedOn = !this.switchedOn;\n    }\n  };\n\n  return button;\n}\n\nvar UI = {\n  width: 600,\n  top_margin: 5,\n  left_margin: 5,\n  inAboutScreen: false,\n  inInstructionsScreen: false,\n  instructionsLine: 0,\n  debugText: \"\",\n  init: function init() {\n    this.touchesWithMouse = [];\n    this.mouseTouch = {\n      alive: false,\n      endTime: 0\n    };\n    this.mouseDown = false;\n    this.aboutButton = makeButton(460, 392, 140, 30, \"about...\", true);\n    this.alwaysVoiceButton = makeButton(460, 428, 140, 30, \"always voice\", true);\n    this.autoWobbleButton = makeButton(460, 464, 140, 30, \"pitch wobble\", false);\n    tractCanvas.addEventListener('touchstart', UI.startTouches);\n    tractCanvas.addEventListener('touchmove', UI.moveTouches);\n    tractCanvas.addEventListener('touchend', UI.endTouches);\n    tractCanvas.addEventListener('touchcancel', UI.endTouches);\n    document.addEventListener('touchstart', function (event) {\n      event.preventDefault();\n    });\n    document.addEventListener('mousedown', function (event) {\n      UI.mouseDown = true;\n      event.preventDefault();\n      UI.startMouse(event);\n    });\n    document.addEventListener('mouseup', function (event) {\n      UI.mouseDown = false;\n      UI.endMouse(event);\n    });\n    document.addEventListener('mousemove', UI.moveMouse);\n  },\n  draw: function draw() {\n    this.alwaysVoiceButton.draw(tractCtx);\n    this.autoWobbleButton.draw(tractCtx);\n    this.aboutButton.draw(tractCtx);\n    if (this.inAboutScreen) this.drawAboutScreen();else if (this.inInstructionsScreen) this.drawInstructionsScreen();\n  },\n  drawAboutScreen: function drawAboutScreen() {\n    var ctx = tractCtx;\n    ctx.globalAlpha = 0.8;\n    ctx.fillStyle = \"white\";\n    ctx.rect(0, 0, 600, 600);\n    ctx.fill();\n    this.drawAboutText();\n  },\n  drawAboutText: function drawAboutText() {\n    var ctx = tractCtx;\n    ctx.globalAlpha = 1.0;\n    ctx.fillStyle = \"#C070C6\";\n    ctx.strokeStyle = \"#C070C6\";\n    ctx.font = \"50px Arial\";\n    ctx.lineWidth = 3;\n    ctx.textAlign = \"center\";\n    ctx.strokeText(\"P i n k   T r o m b o n e\", 300, 230);\n    ctx.fillText(\"P i n k   T r o m b o n e\", 300, 230);\n    ctx.font = \"28px Arial\";\n    ctx.fillText(\"bare-handed  speech synthesis\", 300, 330);\n    ctx.font = \"20px Arial\"; //ctx.fillText(\"(tap to start)\", 300, 380);   \n\n    if (isFirefox) {\n      ctx.font = \"20px Arial\";\n      ctx.fillText(\"(sorry - may work poorly with the Firefox browser)\", 300, 430);\n    }\n  },\n  drawInstructionsScreen: function drawInstructionsScreen() {\n    _audioSystem.default.mute();\n\n    var ctx = tractCtx;\n    ctx.globalAlpha = 0.85;\n    ctx.fillStyle = \"white\";\n    ctx.rect(0, 0, 600, 600);\n    ctx.fill();\n    ctx.globalAlpha = 1.0;\n    ctx.fillStyle = \"#C070C6\";\n    ctx.strokeStyle = \"#C070C6\";\n    ctx.font = \"24px Arial\";\n    ctx.lineWidth = 2;\n    ctx.textAlign = \"center\";\n    ctx.font = \"19px Arial\";\n    ctx.textAlign = \"left\";\n    this.instructionsLine = 0;\n    this.write(\"Sound is generated in the glottis (at the bottom left) then \");\n    this.write(\"filtered by the shape of the vocal tract. The voicebox \");\n    this.write(\"controls the pitch and intensity of the initial sound.\");\n    this.write(\"\");\n    this.write(\"Then, to talk:\");\n    this.write(\"\");\n    this.write(\"- move the body of the tongue to shape vowels\");\n    this.write(\"\");\n    this.write(\"- touch the oral cavity to narrow it, for fricative consonants\");\n    this.write(\"\");\n    this.write(\"- touch above the oral cavity to close it, for stop consonants\");\n    this.write(\"\");\n    this.write(\"- touch the nasal cavity to open the velum and let sound \");\n    this.write(\"   flow through the nose.\");\n    this.write(\"\");\n    this.write(\"\");\n    this.write(\"(tap anywhere to continue)\");\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"[tap here to RESET]\", 470, 535);\n    this.instructionsLine = 18.8;\n    ctx.textAlign = \"left\";\n    this.write(\"Pink Trombone v1.1\");\n    this.write(\"by Neil Thapen\");\n    ctx.fillStyle = \"blue\";\n    ctx.globalAlpha = 0.6;\n    this.write(\"venuspatrol.nfshost.com\");\n    /*ctx.beginPath();\n    ctx.rect(35, 535, 230, 35);\n    ctx.rect(370, 505, 200, 50);\n    ctx.fill();*/\n\n    ctx.globalAlpha = 1.0;\n  },\n  instructionsScreenHandleTouch: function instructionsScreenHandleTouch(x, y) {\n    if (x >= 35 && x <= 265 && y >= 535 && y <= 570) window.location.href = \"http://venuspatrol.nfshost.com\";else if (x >= 370 && x <= 570 && y >= 505 && y <= 555) location.reload(false);else {\n      UI.inInstructionsScreen = false;\n      UI.aboutButton.switchedOn = true;\n\n      _audioSystem.default.unmute();\n    }\n  },\n  write: function write(text) {\n    tractCtx.fillText(text, 50, 100 + this.instructionsLine * 22);\n    this.instructionsLine += 1;\n    if (text == \"\") this.instructionsLine -= 0.3;\n  },\n  buttonsHandleTouchStart: function buttonsHandleTouchStart(touch) {\n    this.alwaysVoiceButton.handleTouchStart(touch);\n    alwaysVoice = this.alwaysVoiceButton.switchedOn;\n    this.autoWobbleButton.handleTouchStart(touch);\n    autoWobble = this.autoWobbleButton.switchedOn;\n    this.aboutButton.handleTouchStart(touch);\n  },\n  startTouches: function startTouches(event) {\n    event.preventDefault();\n\n    if (!_audioSystem.default.started) {\n      _audioSystem.default.started = true;\n\n      _audioSystem.default.startSound();\n    }\n\n    if (UI.inAboutScreen) {\n      UI.inAboutScreen = false;\n      return;\n    }\n\n    if (UI.inInstructionsScreen) {\n      var touches = event.changedTouches;\n\n      for (var j = 0; j < touches.length; j++) {\n        var x = (touches[j].pageX - UI.left_margin) / UI.width * 600;\n        var y = (touches[j].pageY - UI.top_margin) / UI.width * 600;\n      }\n\n      UI.instructionsScreenHandleTouch(x, y);\n      return;\n    }\n\n    var touches = event.changedTouches;\n\n    for (var j = 0; j < touches.length; j++) {\n      var touch = {};\n      touch.startTime = time;\n      touch.endTime = 0;\n      touch.fricative_intensity = 0;\n      touch.alive = true;\n      touch.id = touches[j].identifier;\n      touch.x = (touches[j].pageX - UI.left_margin) / UI.width * 600;\n      touch.y = (touches[j].pageY - UI.top_margin) / UI.width * 600;\n      touch.index = _tractUi.default.getIndex(touch.x, touch.y);\n      touch.diameter = _tractUi.default.getDiameter(touch.x, touch.y);\n      UI.touchesWithMouse.push(touch);\n      UI.buttonsHandleTouchStart(touch);\n    }\n\n    UI.handleTouches();\n  },\n  getTouchById: function getTouchById(id) {\n    for (var j = 0; j < UI.touchesWithMouse.length; j++) {\n      if (UI.touchesWithMouse[j].id == id && UI.touchesWithMouse[j].alive) return UI.touchesWithMouse[j];\n    }\n\n    return 0;\n  },\n  moveTouches: function moveTouches(event) {\n    var touches = event.changedTouches;\n\n    for (var j = 0; j < touches.length; j++) {\n      var touch = UI.getTouchById(touches[j].identifier);\n\n      if (touch != 0) {\n        touch.x = (touches[j].pageX - UI.left_margin) / UI.width * 600;\n        touch.y = (touches[j].pageY - UI.top_margin) / UI.width * 600;\n        touch.index = _tractUi.default.getIndex(touch.x, touch.y);\n        touch.diameter = _tractUi.default.getDiameter(touch.x, touch.y);\n      }\n    }\n\n    UI.handleTouches();\n  },\n  endTouches: function endTouches(event) {\n    var touches = event.changedTouches;\n\n    for (var j = 0; j < touches.length; j++) {\n      var touch = UI.getTouchById(touches[j].identifier);\n\n      if (touch != 0) {\n        touch.alive = false;\n        touch.endTime = time;\n      }\n    }\n\n    UI.handleTouches();\n\n    if (!UI.aboutButton.switchedOn) {\n      UI.inInstructionsScreen = true;\n    }\n  },\n  startMouse: function startMouse(event) {\n    if (!_audioSystem.default.started) {\n      _audioSystem.default.started = true;\n\n      _audioSystem.default.startSound();\n    }\n\n    if (UI.inAboutScreen) {\n      UI.inAboutScreen = false;\n      return;\n    }\n\n    if (UI.inInstructionsScreen) {\n      var x = (event.pageX - tractCanvas.offsetLeft) / UI.width * 600;\n      var y = (event.pageY - tractCanvas.offsetTop) / UI.width * 600;\n      UI.instructionsScreenHandleTouch(x, y);\n      return;\n    }\n\n    var touch = {};\n    touch.startTime = time;\n    touch.fricative_intensity = 0;\n    touch.endTime = 0;\n    touch.alive = true;\n    touch.id = \"mouse\" + Math.random();\n    touch.x = (event.pageX - tractCanvas.offsetLeft) / UI.width * 600;\n    touch.y = (event.pageY - tractCanvas.offsetTop) / UI.width * 600;\n    touch.index = _tractUi.default.getIndex(touch.x, touch.y);\n    touch.diameter = _tractUi.default.getDiameter(touch.x, touch.y);\n    UI.mouseTouch = touch;\n    UI.touchesWithMouse.push(touch);\n    UI.buttonsHandleTouchStart(touch);\n    UI.handleTouches();\n  },\n  moveMouse: function moveMouse(event) {\n    var touch = UI.mouseTouch;\n    if (!touch.alive) return;\n    touch.x = (event.pageX - tractCanvas.offsetLeft) / UI.width * 600;\n    touch.y = (event.pageY - tractCanvas.offsetTop) / UI.width * 600;\n    touch.index = _tractUi.default.getIndex(touch.x, touch.y);\n    touch.diameter = _tractUi.default.getDiameter(touch.x, touch.y);\n    UI.handleTouches();\n  },\n  endMouse: function endMouse(event) {\n    var touch = UI.mouseTouch;\n    if (!touch.alive) return;\n    touch.alive = false;\n    touch.endTime = time;\n    UI.handleTouches();\n    if (!UI.aboutButton.switchedOn) UI.inInstructionsScreen = true;\n  },\n  handleTouches: function handleTouches(event) {\n    _tractUi.default.handleTouches();\n\n    _glottis.default.handleTouches();\n\n    _glottis.default.handleOSC();\n  },\n  updateTouches: function updateTouches() {\n    var fricativeAttackTime = 0.1;\n\n    for (var j = UI.touchesWithMouse.length - 1; j >= 0; j--) {\n      var touch = UI.touchesWithMouse[j];\n\n      if (!touch.alive && time > touch.endTime + 1) {\n        UI.touchesWithMouse.splice(j, 1);\n      } else if (touch.alive) {\n        touch.fricative_intensity = Math.clamp((time - touch.startTime) / fricativeAttackTime, 0, 1);\n      } else {\n        touch.fricative_intensity = Math.clamp(1 - (time - touch.endTime) / fricativeAttackTime, 0, 1);\n      }\n    }\n  },\n  shapeToFitScreen: function shapeToFitScreen() {\n    if (window.innerWidth <= window.innerHeight) {\n      this.width = window.innerWidth - 10;\n      this.left_margin = 5;\n      this.top_margin = 0.5 * (window.innerHeight - this.width);\n    } else {\n      this.width = window.innerHeight - 10;\n      this.left_margin = 0.5 * (window.innerWidth - this.width);\n      this.top_margin = 5;\n    }\n\n    document.body.style.marginLeft = this.left_margin;\n    document.body.style.marginTop = this.top_margin;\n    tractCanvas.style.width = this.width;\n    backCanvas.style.width = this.width;\n  }\n};\nvar _default = UI;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/ui/ui.js?");

/***/ })

/******/ });