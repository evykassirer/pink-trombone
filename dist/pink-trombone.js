/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nvar _audioSystem = _interopRequireDefault(__webpack_require__(/*! ./audio/audio-system */ \"./src/audio/audio-system.js\"));\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ./audio/glottis */ \"./src/audio/glottis.js\"));\n\nvar _tract = _interopRequireDefault(__webpack_require__(/*! ./audio/tract */ \"./src/audio/tract.js\"));\n\nvar _ui = _interopRequireDefault(__webpack_require__(/*! ./ui/ui */ \"./src/ui/ui.js\"));\n\nvar _tractUi = _interopRequireDefault(__webpack_require__(/*! ./ui/tract-ui */ \"./src/ui/tract-ui.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// globals\nwindow.time = 0;\nwindow.sampleRate = 441000;\nwindow.autoWobble = true;\nwindow.alwaysVoice = true;\nwindow.palePink = \"#FFEEF5\";\n\nMath.clamp = function (number, min, max) {\n  if (number < min) return min;else if (number > max) return max;else return number;\n};\n\nMath.moveTowards = function (current, target, amount) {\n  if (current < target) return Math.min(current + amount, target);else return Math.max(current - amount, target);\n};\n\nMath.moveTowards = function (current, target, amountUp, amountDown) {\n  if (current < target) return Math.min(current + amountUp, target);else return Math.max(current - amountDown, target);\n};\n\nMath.gaussian = function () {\n  var s = 0;\n\n  for (var c = 0; c < 16; c++) {\n    s += Math.random();\n  }\n\n  return (s - 8) / 4;\n};\n\nvar noiseFreq = 500;\nvar noiseQ = 0.7;\nvar isFirefox = false;\nvar browser = navigator.userAgent.toLowerCase();\nif (browser.indexOf('firefox') > -1) isFirefox = true;\ndocument.body.style.cursor = 'pointer';\n\n_audioSystem.default.init();\n\n_ui.default.init();\n\n_glottis.default.init();\n\n_tract.default.init();\n\n_tractUi.default.init();\n\nrequestAnimationFrame(redraw);\n\nfunction redraw(highResTimestamp) {\n  _ui.default.shapeToFitScreen();\n\n  _tractUi.default.draw();\n\n  _ui.default.draw();\n\n  requestAnimationFrame(redraw);\n  time = Date.now() / 1000;\n\n  _ui.default.updateTouches();\n}\n/**********************************************************************************/\n\n/**********************************************************************************/\n\n/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n// (function (global) {\n\n\nvar _module = global.noise = {};\n\nfunction Grad(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n}\n\nGrad.prototype.dot2 = function (x, y) {\n  return this.x * x + this.y * y;\n};\n\nGrad.prototype.dot3 = function (x, y, z) {\n  return this.x * x + this.y * y + this.z * z;\n};\n\nvar grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\nvar p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]; // To remove the need for index wrapping, double the permutation table length\n\nvar perm = new Array(512);\nvar gradP = new Array(512); // This isn't a very good seeding function, but it works ok. It supports 2^16\n// different seed values. Write something better if you need more seeds.\n\n_module.seed = function (seed) {\n  if (seed > 0 && seed < 1) {\n    // Scale the seed out\n    seed *= 65536;\n  }\n\n  seed = Math.floor(seed);\n\n  if (seed < 256) {\n    seed |= seed << 8;\n  }\n\n  for (var i = 0; i < 256; i++) {\n    var v;\n\n    if (i & 1) {\n      v = p[i] ^ seed & 255;\n    } else {\n      v = p[i] ^ seed >> 8 & 255;\n    }\n\n    perm[i] = perm[i + 256] = v;\n    gradP[i] = gradP[i + 256] = grad3[v % 12];\n  }\n};\n\n_module.seed(Date.now());\n/*\nfor(var i=0; i<256; i++) {\n  perm[i] = perm[i + 256] = p[i];\n  gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n}*/\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\n\n\nvar F2 = 0.5 * (Math.sqrt(3) - 1);\nvar G2 = (3 - Math.sqrt(3)) / 6;\nvar F3 = 1 / 3;\nvar G3 = 1 / 6; // 2D simplex noise\n\n_module.simplex2 = function (xin, yin) {\n  var n0, n1, n2; // Noise contributions from the three corners\n  // Skew the input space to determine which simplex cell we're in\n\n  var s = (xin + yin) * F2; // Hairy factor for 2D\n\n  var i = Math.floor(xin + s);\n  var j = Math.floor(yin + s);\n  var t = (i + j) * G2;\n  var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n  var y0 = yin - j + t; // For the 2D case, the simplex shape is an equilateral triangle.\n  // Determine which simplex we are in.\n\n  var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n  if (x0 > y0) {\n    // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    i1 = 1;\n    j1 = 0;\n  } else {\n    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    i1 = 0;\n    j1 = 1;\n  } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n  // c = (3-sqrt(3))/6\n\n\n  var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n  var y1 = y0 - j1 + G2;\n  var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n  var y2 = y0 - 1 + 2 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n  i &= 255;\n  j &= 255;\n  var gi0 = gradP[i + perm[j]];\n  var gi1 = gradP[i + i1 + perm[j + j1]];\n  var gi2 = gradP[i + 1 + perm[j + 1]]; // Calculate the contribution from the three corners\n\n  var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n  if (t0 < 0) {\n    n0 = 0;\n  } else {\n    t0 *= t0;\n    n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n  }\n\n  var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n  if (t1 < 0) {\n    n1 = 0;\n  } else {\n    t1 *= t1;\n    n1 = t1 * t1 * gi1.dot2(x1, y1);\n  }\n\n  var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n  if (t2 < 0) {\n    n2 = 0;\n  } else {\n    t2 *= t2;\n    n2 = t2 * t2 * gi2.dot2(x2, y2);\n  } // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n\n\n  return 70 * (n0 + n1 + n2);\n};\n\n_module.simplex1 = function (x) {\n  return _module.simplex2(x * 1.2, -x * 0.7);\n}; // })(this);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./src/app.js?");

/***/ }),

/***/ "./src/audio/audio-system.js":
/*!***********************************!*\
  !*** ./src/audio/audio-system.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ./glottis */ \"./src/audio/glottis.js\"));\n\nvar _tract = _interopRequireDefault(__webpack_require__(/*! ./tract */ \"./src/audio/tract.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AudioSystem = {\n  blockLength: 512,\n  blockTime: 1,\n  started: false,\n  soundOn: false,\n  init: function init() {\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    this.audioContext = new window.AudioContext();\n    sampleRate = this.audioContext.sampleRate;\n    this.blockTime = this.blockLength / sampleRate;\n  },\n  startSound: function startSound() {\n    //scriptProcessor may need a dummy input channel on iOS\n    this.scriptProcessor = this.audioContext.createScriptProcessor(this.blockLength, 2, 1);\n    this.scriptProcessor.connect(this.audioContext.destination);\n    this.scriptProcessor.onaudioprocess = AudioSystem.doScriptProcessor;\n    var whiteNoise = this.createWhiteNoiseNode(2 * sampleRate); // 2 seconds of noise\n\n    var aspirateFilter = this.audioContext.createBiquadFilter();\n    aspirateFilter.type = \"bandpass\";\n    aspirateFilter.frequency.value = 500;\n    aspirateFilter.Q.value = 0.5;\n    whiteNoise.connect(aspirateFilter);\n    aspirateFilter.connect(this.scriptProcessor);\n    var fricativeFilter = this.audioContext.createBiquadFilter();\n    fricativeFilter.type = \"bandpass\";\n    fricativeFilter.frequency.value = 1000;\n    fricativeFilter.Q.value = 0.5;\n    whiteNoise.connect(fricativeFilter);\n    fricativeFilter.connect(this.scriptProcessor);\n    whiteNoise.start(0);\n  },\n  createWhiteNoiseNode: function createWhiteNoiseNode(frameCount) {\n    var myArrayBuffer = this.audioContext.createBuffer(1, frameCount, sampleRate);\n    var nowBuffering = myArrayBuffer.getChannelData(0);\n\n    for (var i = 0; i < frameCount; i++) {\n      nowBuffering[i] = Math.random(); // gaussian();\n    }\n\n    var source = this.audioContext.createBufferSource();\n    source.buffer = myArrayBuffer;\n    source.loop = true;\n    return source;\n  },\n  doScriptProcessor: function doScriptProcessor(event) {\n    var inputArray1 = event.inputBuffer.getChannelData(0);\n    var inputArray2 = event.inputBuffer.getChannelData(1);\n    var outArray = event.outputBuffer.getChannelData(0);\n\n    for (var j = 0, N = outArray.length; j < N; j++) {\n      var lambda1 = j / N;\n      var lambda2 = (j + 0.5) / N;\n\n      var glottalOutput = _glottis.default.runStep(lambda1, inputArray1[j]);\n\n      var vocalOutput = 0; //Tract runs at twice the sample rate \n\n      _tract.default.runStep(glottalOutput, inputArray2[j], lambda1);\n\n      vocalOutput += _tract.default.lipOutput + _tract.default.noseOutput;\n\n      _tract.default.runStep(glottalOutput, inputArray2[j], lambda2);\n\n      vocalOutput += _tract.default.lipOutput + _tract.default.noseOutput;\n      outArray[j] = vocalOutput * 0.125;\n    }\n\n    _glottis.default.finishBlock();\n\n    _tract.default.finishBlock();\n  },\n  mute: function mute() {\n    this.scriptProcessor.disconnect();\n  },\n  unmute: function unmute() {\n    this.scriptProcessor.connect(this.audioContext.destination);\n  }\n};\nvar _default = AudioSystem;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/audio/audio-system.js?");

/***/ }),

/***/ "./src/audio/glottis.js":
/*!******************************!*\
  !*** ./src/audio/glottis.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ui = _interopRequireDefault(__webpack_require__(/*! ../ui/ui */ \"./src/ui/ui.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar backCanvas = document.getElementById(\"backCanvas\");\nvar backCtx = backCanvas.getContext(\"2d\");\nvar Glottis = {\n  timeInWaveform: 0,\n  oldFrequency: 140,\n  newFrequency: 140,\n  UIFrequency: 140,\n  smoothFrequency: 140,\n  oldTenseness: 0.6,\n  newTenseness: 0.6,\n  UITenseness: 0.6,\n  totalTime: 0,\n  vibratoAmount: 0.005,\n  vibratoFrequency: 6,\n  intensity: 0,\n  loudness: 1,\n  isTouched: false,\n  ctx: backCtx,\n  touch: 0,\n  x: 240,\n  y: 530,\n  keyboardTop: 500,\n  keyboardLeft: 0,\n  keyboardWidth: 600,\n  keyboardHeight: 100,\n  semitones: 20,\n  marks: [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],\n  baseNote: 87.3071,\n  //F\n  init: function init() {\n    this.setupWaveform(0);\n    this.drawKeyboard();\n  },\n  drawKeyboard: function drawKeyboard() {\n    this.ctx.strokeStyle = palePink;\n    this.ctx.fillStyle = palePink;\n    backCtx.globalAlpha = 1.0;\n    backCtx.lineCap = 'round';\n    backCtx.lineJoin = 'round';\n    var radius = 2;\n    this.drawBar(0.0, 0.4, 8);\n    backCtx.globalAlpha = 0.7;\n    this.drawBar(0.52, 0.72, 8);\n    backCtx.strokeStyle = \"orchid\";\n    backCtx.fillStyle = \"orchid\";\n\n    for (var i = 0; i < this.semitones; i++) {\n      var keyWidth = this.keyboardWidth / this.semitones;\n      var x = this.keyboardLeft + (i + 1 / 2) * keyWidth;\n      var y = this.keyboardTop;\n\n      if (this.marks[(i + 3) % 12] == 1) {\n        backCtx.lineWidth = 4;\n        backCtx.globalAlpha = 0.4;\n      } else {\n        backCtx.lineWidth = 3;\n        backCtx.globalAlpha = 0.2;\n      }\n\n      backCtx.beginPath();\n      backCtx.moveTo(x, y + 9);\n      backCtx.lineTo(x, y + this.keyboardHeight * 0.4 - 9);\n      backCtx.stroke();\n      backCtx.lineWidth = 3;\n      backCtx.globalAlpha = 0.15;\n      backCtx.beginPath();\n      backCtx.moveTo(x, y + this.keyboardHeight * 0.52 + 6);\n      backCtx.lineTo(x, y + this.keyboardHeight * 0.72 - 6);\n      backCtx.stroke();\n    }\n\n    backCtx.fillStyle = \"orchid\";\n    backCtx.font = \"17px Arial\";\n    backCtx.textAlign = \"center\";\n    backCtx.globalAlpha = 0.7;\n    backCtx.fillText(\"voicebox control\", 300, 490);\n    backCtx.fillText(\"pitch\", 300, 592);\n    backCtx.globalAlpha = 0.3;\n    backCtx.strokeStyle = \"orchid\";\n    backCtx.fillStyle = \"orchid\";\n    backCtx.save();\n    backCtx.translate(410, 587);\n    this.drawArrow(80, 2, 10);\n    backCtx.translate(-220, 0);\n    backCtx.rotate(Math.PI);\n    this.drawArrow(80, 2, 10);\n    backCtx.restore();\n    backCtx.globalAlpha = 1.0;\n  },\n  drawBar: function drawBar(topFactor, bottomFactor, radius) {\n    backCtx.lineWidth = radius * 2;\n    backCtx.beginPath();\n    backCtx.moveTo(this.keyboardLeft + radius, this.keyboardTop + topFactor * this.keyboardHeight + radius);\n    backCtx.lineTo(this.keyboardLeft + this.keyboardWidth - radius, this.keyboardTop + topFactor * this.keyboardHeight + radius);\n    backCtx.lineTo(this.keyboardLeft + this.keyboardWidth - radius, this.keyboardTop + bottomFactor * this.keyboardHeight - radius);\n    backCtx.lineTo(this.keyboardLeft + radius, this.keyboardTop + bottomFactor * this.keyboardHeight - radius);\n    backCtx.closePath();\n    backCtx.stroke();\n    backCtx.fill();\n  },\n  drawArrow: function drawArrow(l, ahw, ahl) {\n    backCtx.lineWidth = 2;\n    backCtx.beginPath();\n    backCtx.moveTo(-l, 0);\n    backCtx.lineTo(0, 0);\n    backCtx.lineTo(0, -ahw);\n    backCtx.lineTo(ahl, 0);\n    backCtx.lineTo(0, ahw);\n    backCtx.lineTo(0, 0);\n    backCtx.closePath();\n    backCtx.stroke();\n    backCtx.fill();\n  },\n  handleTouches: function handleTouches() {\n    if (this.touch != 0 && !this.touch.alive) this.touch = 0;\n\n    if (this.touch == 0) {\n      for (var j = 0; j < _ui.default.touchesWithMouse.length; j++) {\n        var touch = _ui.default.touchesWithMouse[j];\n        if (!touch.alive) continue;\n        if (touch.y < this.keyboardTop) continue;\n        this.touch = touch;\n      }\n    }\n\n    if (this.touch != 0) {\n      var local_y = this.touch.y - this.keyboardTop - 10;\n      var local_x = this.touch.x - this.keyboardLeft;\n      local_y = Math.clamp(local_y, 0, this.keyboardHeight - 26);\n      var semitone = this.semitones * local_x / this.keyboardWidth + 0.5;\n      Glottis.UIFrequency = this.baseNote * Math.pow(2, semitone / 12);\n      if (Glottis.intensity == 0) Glottis.smoothFrequency = Glottis.UIFrequency; //Glottis.UIRd = 3*local_y / (this.keyboardHeight-20);\n\n      var t = Math.clamp(1 - local_y / (this.keyboardHeight - 28), 0, 1);\n      Glottis.UITenseness = 1 - Math.cos(t * Math.PI * 0.5);\n      Glottis.loudness = Math.pow(Glottis.UITenseness, 0.25);\n      this.x = this.touch.x;\n      this.y = local_y + this.keyboardTop + 10;\n    }\n\n    Glottis.isTouched = this.touch != 0;\n  },\n  runStep: function runStep(lambda, noiseSource) {\n    var timeStep = 1.0 / sampleRate;\n    this.timeInWaveform += timeStep;\n    this.totalTime += timeStep;\n\n    if (this.timeInWaveform > this.waveformLength) {\n      this.timeInWaveform -= this.waveformLength;\n      this.setupWaveform(lambda);\n    }\n\n    var out = this.normalizedLFWaveform(this.timeInWaveform / this.waveformLength);\n    var aspiration = this.intensity * (1 - Math.sqrt(this.UITenseness)) * this.getNoiseModulator() * noiseSource;\n    aspiration *= 0.2 + 0.02 * noise.simplex1(this.totalTime * 1.99);\n    out += aspiration;\n    return out;\n  },\n  getNoiseModulator: function getNoiseModulator() {\n    var voiced = 0.1 + 0.2 * Math.max(0, Math.sin(Math.PI * 2 * this.timeInWaveform / this.waveformLength)); //return 0.3;\n\n    return this.UITenseness * this.intensity * voiced + (1 - this.UITenseness * this.intensity) * 0.3;\n  },\n  finishBlock: function finishBlock() {\n    var vibrato = 0;\n    vibrato += this.vibratoAmount * Math.sin(2 * Math.PI * this.totalTime * this.vibratoFrequency);\n    vibrato += 0.02 * noise.simplex1(this.totalTime * 4.07);\n    vibrato += 0.04 * noise.simplex1(this.totalTime * 2.15);\n\n    if (autoWobble) {\n      vibrato += 0.2 * noise.simplex1(this.totalTime * 0.98);\n      vibrato += 0.4 * noise.simplex1(this.totalTime * 0.5);\n    }\n\n    if (this.UIFrequency > this.smoothFrequency) this.smoothFrequency = Math.min(this.smoothFrequency * 1.1, this.UIFrequency);\n    if (this.UIFrequency < this.smoothFrequency) this.smoothFrequency = Math.max(this.smoothFrequency / 1.1, this.UIFrequency);\n    this.oldFrequency = this.newFrequency;\n    this.newFrequency = this.smoothFrequency * (1 + vibrato);\n    this.oldTenseness = this.newTenseness;\n    this.newTenseness = this.UITenseness + 0.1 * noise.simplex1(this.totalTime * 0.46) + 0.05 * noise.simplex1(this.totalTime * 0.36);\n    if (!this.isTouched && alwaysVoice) this.newTenseness += (3 - this.UITenseness) * (1 - this.intensity);\n    if (this.isTouched || alwaysVoice) this.intensity += 0.13;else this.intensity -= 0.05;\n    this.intensity = Math.clamp(this.intensity, 0, 1);\n  },\n  setupWaveform: function setupWaveform(lambda) {\n    this.frequency = this.oldFrequency * (1 - lambda) + this.newFrequency * lambda;\n    var tenseness = this.oldTenseness * (1 - lambda) + this.newTenseness * lambda;\n    this.Rd = 3 * (1 - tenseness);\n    this.waveformLength = 1.0 / this.frequency;\n    var Rd = this.Rd;\n    if (Rd < 0.5) Rd = 0.5;\n    if (Rd > 2.7) Rd = 2.7;\n    var output; // normalized to time = 1, Ee = 1\n\n    var Ra = -0.01 + 0.048 * Rd;\n    var Rk = 0.224 + 0.118 * Rd;\n    var Rg = Rk / 4 * (0.5 + 1.2 * Rk) / (0.11 * Rd - Ra * (0.5 + 1.2 * Rk));\n    var Ta = Ra;\n    var Tp = 1 / (2 * Rg);\n    var Te = Tp + Tp * Rk; //\n\n    var epsilon = 1 / Ta;\n    var shift = Math.exp(-epsilon * (1 - Te));\n    var Delta = 1 - shift; //divide by this to scale RHS\n\n    var RHSIntegral = 1 / epsilon * (shift - 1) + (1 - Te) * shift;\n    RHSIntegral = RHSIntegral / Delta;\n    var totalLowerIntegral = -(Te - Tp) / 2 + RHSIntegral;\n    var totalUpperIntegral = -totalLowerIntegral;\n    var omega = Math.PI / Tp;\n    var s = Math.sin(omega * Te); // need E0*e^(alpha*Te)*s = -1 (to meet the return at -1)\n    // and E0*e^(alpha*Tp/2) * Tp*2/pi = totalUpperIntegral \n    //             (our approximation of the integral up to Tp)\n    // writing x for e^alpha,\n    // have E0*x^Te*s = -1 and E0 * x^(Tp/2) * Tp*2/pi = totalUpperIntegral\n    // dividing the second by the first,\n    // letting y = x^(Tp/2 - Te),\n    // y * Tp*2 / (pi*s) = -totalUpperIntegral;\n\n    var y = -Math.PI * s * totalUpperIntegral / (Tp * 2);\n    var z = Math.log(y);\n    var alpha = z / (Tp / 2 - Te);\n    var E0 = -1 / (s * Math.exp(alpha * Te));\n    this.alpha = alpha;\n    this.E0 = E0;\n    this.epsilon = epsilon;\n    this.shift = shift;\n    this.Delta = Delta;\n    this.Te = Te;\n    this.omega = omega;\n  },\n  normalizedLFWaveform: function normalizedLFWaveform(t) {\n    var output;\n    if (t > this.Te) output = (-Math.exp(-this.epsilon * (t - this.Te)) + this.shift) / this.Delta;else output = this.E0 * Math.exp(this.alpha * t) * Math.sin(this.omega * t);\n    return output * this.intensity * this.loudness;\n  }\n};\nvar _default = Glottis;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/audio/glottis.js?");

/***/ }),

/***/ "./src/audio/tract.js":
/*!****************************!*\
  !*** ./src/audio/tract.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _audioSystem = _interopRequireDefault(__webpack_require__(/*! ./audio-system */ \"./src/audio/audio-system.js\"));\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ./glottis */ \"./src/audio/glottis.js\"));\n\nvar _ui = _interopRequireDefault(__webpack_require__(/*! ../ui/ui */ \"./src/ui/ui.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Tract = {\n  n: 44,\n  bladeStart: 10,\n  tipStart: 32,\n  lipStart: 39,\n  R: [],\n  //component going right\n  L: [],\n  //component going left\n  reflection: [],\n  junctionOutputR: [],\n  junctionOutputL: [],\n  maxAmplitude: [],\n  diameter: [],\n  restDiameter: [],\n  targetDiameter: [],\n  newDiameter: [],\n  A: [],\n  glottalReflection: 0.75,\n  lipReflection: -0.85,\n  lastObstruction: -1,\n  fade: 1.0,\n  //0.9999,\n  movementSpeed: 15,\n  //cm per second\n  transients: [],\n  lipOutput: 0,\n  noseOutput: 0,\n  velumTarget: 0.01,\n  init: function init() {\n    this.bladeStart = Math.floor(this.bladeStart * this.n / 44);\n    this.tipStart = Math.floor(this.tipStart * this.n / 44);\n    this.lipStart = Math.floor(this.lipStart * this.n / 44);\n    this.diameter = new Float64Array(this.n);\n    this.restDiameter = new Float64Array(this.n);\n    this.targetDiameter = new Float64Array(this.n);\n    this.newDiameter = new Float64Array(this.n);\n\n    for (var i = 0; i < this.n; i++) {\n      var diameter = 0;\n      if (i < 7 * this.n / 44 - 0.5) diameter = 0.6;else if (i < 12 * this.n / 44) diameter = 1.1;else diameter = 1.5;\n      this.diameter[i] = this.restDiameter[i] = this.targetDiameter[i] = this.newDiameter[i] = diameter;\n    }\n\n    this.R = new Float64Array(this.n);\n    this.L = new Float64Array(this.n);\n    this.reflection = new Float64Array(this.n + 1);\n    this.newReflection = new Float64Array(this.n + 1);\n    this.junctionOutputR = new Float64Array(this.n + 1);\n    this.junctionOutputL = new Float64Array(this.n + 1);\n    this.A = new Float64Array(this.n);\n    this.maxAmplitude = new Float64Array(this.n);\n    this.noseLength = Math.floor(28 * this.n / 44);\n    this.noseStart = this.n - this.noseLength + 1;\n    this.noseR = new Float64Array(this.noseLength);\n    this.noseL = new Float64Array(this.noseLength);\n    this.noseJunctionOutputR = new Float64Array(this.noseLength + 1);\n    this.noseJunctionOutputL = new Float64Array(this.noseLength + 1);\n    this.noseReflection = new Float64Array(this.noseLength + 1);\n    this.noseDiameter = new Float64Array(this.noseLength);\n    this.noseA = new Float64Array(this.noseLength);\n    this.noseMaxAmplitude = new Float64Array(this.noseLength);\n\n    for (var i = 0; i < this.noseLength; i++) {\n      var diameter;\n      var d = 2 * (i / this.noseLength);\n      if (d < 1) diameter = 0.4 + 1.6 * d;else diameter = 0.5 + 1.5 * (2 - d);\n      diameter = Math.min(diameter, 1.9);\n      this.noseDiameter[i] = diameter;\n    }\n\n    this.newReflectionLeft = this.newReflectionRight = this.newReflectionNose = 0;\n    this.calculateReflections();\n    this.calculateNoseReflections();\n    this.noseDiameter[0] = this.velumTarget;\n  },\n  reshapeTract: function reshapeTract(deltaTime) {\n    var amount = deltaTime * this.movementSpeed;\n    ;\n    var newLastObstruction = -1;\n\n    for (var i = 0; i < this.n; i++) {\n      var diameter = this.diameter[i];\n      var targetDiameter = this.targetDiameter[i];\n      if (diameter <= 0) newLastObstruction = i;\n      var slowReturn;\n      if (i < this.noseStart) slowReturn = 0.6;else if (i >= this.tipStart) slowReturn = 1.0;else slowReturn = 0.6 + 0.4 * (i - this.noseStart) / (this.tipStart - this.noseStart);\n      this.diameter[i] = Math.moveTowards(diameter, targetDiameter, slowReturn * amount, 2 * amount);\n    }\n\n    if (this.lastObstruction > -1 && newLastObstruction == -1 && this.noseA[0] < 0.05) {\n      this.addTransient(this.lastObstruction);\n    }\n\n    this.lastObstruction = newLastObstruction;\n    amount = deltaTime * this.movementSpeed;\n    this.noseDiameter[0] = Math.moveTowards(this.noseDiameter[0], this.velumTarget, amount * 0.25, amount * 0.1);\n    this.noseA[0] = this.noseDiameter[0] * this.noseDiameter[0];\n  },\n  calculateReflections: function calculateReflections() {\n    for (var i = 0; i < this.n; i++) {\n      this.A[i] = this.diameter[i] * this.diameter[i]; //ignoring PI etc.\n    }\n\n    for (var i = 1; i < this.n; i++) {\n      this.reflection[i] = this.newReflection[i];\n      if (this.A[i] == 0) this.newReflection[i] = 0.999; //to prevent some bad behaviour if 0\n      else this.newReflection[i] = (this.A[i - 1] - this.A[i]) / (this.A[i - 1] + this.A[i]);\n    } //now at junction with nose\n\n\n    this.reflectionLeft = this.newReflectionLeft;\n    this.reflectionRight = this.newReflectionRight;\n    this.reflectionNose = this.newReflectionNose;\n    var sum = this.A[this.noseStart] + this.A[this.noseStart + 1] + this.noseA[0];\n    this.newReflectionLeft = (2 * this.A[this.noseStart] - sum) / sum;\n    this.newReflectionRight = (2 * this.A[this.noseStart + 1] - sum) / sum;\n    this.newReflectionNose = (2 * this.noseA[0] - sum) / sum;\n  },\n  calculateNoseReflections: function calculateNoseReflections() {\n    for (var i = 0; i < this.noseLength; i++) {\n      this.noseA[i] = this.noseDiameter[i] * this.noseDiameter[i];\n    }\n\n    for (var i = 1; i < this.noseLength; i++) {\n      this.noseReflection[i] = (this.noseA[i - 1] - this.noseA[i]) / (this.noseA[i - 1] + this.noseA[i]);\n    }\n  },\n  runStep: function runStep(glottalOutput, turbulenceNoise, lambda) {\n    var updateAmplitudes = Math.random() < 0.1; //mouth\n\n    this.processTransients();\n    this.addTurbulenceNoise(turbulenceNoise); //this.glottalReflection = -0.8 + 1.6 * Glottis.newTenseness;\n\n    this.junctionOutputR[0] = this.L[0] * this.glottalReflection + glottalOutput;\n    this.junctionOutputL[this.n] = this.R[this.n - 1] * this.lipReflection;\n\n    for (var i = 1; i < this.n; i++) {\n      var r = this.reflection[i] * (1 - lambda) + this.newReflection[i] * lambda;\n      var w = r * (this.R[i - 1] + this.L[i]);\n      this.junctionOutputR[i] = this.R[i - 1] - w;\n      this.junctionOutputL[i] = this.L[i] + w;\n    } //now at junction with nose\n\n\n    var i = this.noseStart;\n    var r = this.newReflectionLeft * (1 - lambda) + this.reflectionLeft * lambda;\n    this.junctionOutputL[i] = r * this.R[i - 1] + (1 + r) * (this.noseL[0] + this.L[i]);\n    r = this.newReflectionRight * (1 - lambda) + this.reflectionRight * lambda;\n    this.junctionOutputR[i] = r * this.L[i] + (1 + r) * (this.R[i - 1] + this.noseL[0]);\n    r = this.newReflectionNose * (1 - lambda) + this.reflectionNose * lambda;\n    this.noseJunctionOutputR[0] = r * this.noseL[0] + (1 + r) * (this.L[i] + this.R[i - 1]);\n\n    for (var i = 0; i < this.n; i++) {\n      this.R[i] = this.junctionOutputR[i] * 0.999;\n      this.L[i] = this.junctionOutputL[i + 1] * 0.999; //this.R[i] = Math.clamp(this.junctionOutputR[i] * this.fade, -1, 1);\n      //this.L[i] = Math.clamp(this.junctionOutputL[i+1] * this.fade, -1, 1);    \n\n      if (updateAmplitudes) {\n        var amplitude = Math.abs(this.R[i] + this.L[i]);\n        if (amplitude > this.maxAmplitude[i]) this.maxAmplitude[i] = amplitude;else this.maxAmplitude[i] *= 0.999;\n      }\n    }\n\n    this.lipOutput = this.R[this.n - 1]; //nose     \n\n    this.noseJunctionOutputL[this.noseLength] = this.noseR[this.noseLength - 1] * this.lipReflection;\n\n    for (var i = 1; i < this.noseLength; i++) {\n      var w = this.noseReflection[i] * (this.noseR[i - 1] + this.noseL[i]);\n      this.noseJunctionOutputR[i] = this.noseR[i - 1] - w;\n      this.noseJunctionOutputL[i] = this.noseL[i] + w;\n    }\n\n    for (var i = 0; i < this.noseLength; i++) {\n      this.noseR[i] = this.noseJunctionOutputR[i] * this.fade;\n      this.noseL[i] = this.noseJunctionOutputL[i + 1] * this.fade; //this.noseR[i] = Math.clamp(this.noseJunctionOutputR[i] * this.fade, -1, 1);\n      //this.noseL[i] = Math.clamp(this.noseJunctionOutputL[i+1] * this.fade, -1, 1);    \n\n      if (updateAmplitudes) {\n        var amplitude = Math.abs(this.noseR[i] + this.noseL[i]);\n        if (amplitude > this.noseMaxAmplitude[i]) this.noseMaxAmplitude[i] = amplitude;else this.noseMaxAmplitude[i] *= 0.999;\n      }\n    }\n\n    this.noseOutput = this.noseR[this.noseLength - 1];\n  },\n  finishBlock: function finishBlock() {\n    this.reshapeTract(_audioSystem.default.blockTime);\n    this.calculateReflections();\n  },\n  addTransient: function addTransient(position) {\n    var trans = {};\n    trans.position = position;\n    trans.timeAlive = 0;\n    trans.lifeTime = 0.2;\n    trans.strength = 0.3;\n    trans.exponent = 200;\n    this.transients.push(trans);\n  },\n  processTransients: function processTransients() {\n    for (var i = 0; i < this.transients.length; i++) {\n      var trans = this.transients[i];\n      var amplitude = trans.strength * Math.pow(2, -trans.exponent * trans.timeAlive);\n      this.R[trans.position] += amplitude / 2;\n      this.L[trans.position] += amplitude / 2;\n      trans.timeAlive += 1.0 / (sampleRate * 2);\n    }\n\n    for (var i = this.transients.length - 1; i >= 0; i--) {\n      var trans = this.transients[i];\n\n      if (trans.timeAlive > trans.lifeTime) {\n        this.transients.splice(i, 1);\n      }\n    }\n  },\n  addTurbulenceNoise: function addTurbulenceNoise(turbulenceNoise) {\n    for (var j = 0; j < _ui.default.touchesWithMouse.length; j++) {\n      var touch = _ui.default.touchesWithMouse[j];\n      if (touch.index < 2 || touch.index > Tract.n) continue;\n      if (touch.diameter <= 0) continue;\n      var intensity = touch.fricative_intensity;\n      if (intensity == 0) continue;\n      this.addTurbulenceNoiseAtIndex(0.66 * turbulenceNoise * intensity, touch.index, touch.diameter);\n    }\n  },\n  addTurbulenceNoiseAtIndex: function addTurbulenceNoiseAtIndex(turbulenceNoise, index, diameter) {\n    var i = Math.floor(index);\n    var delta = index - i;\n    turbulenceNoise *= _glottis.default.getNoiseModulator();\n    var thinness0 = Math.clamp(8 * (0.7 - diameter), 0, 1);\n    var openness = Math.clamp(30 * (diameter - 0.3), 0, 1);\n    var noise0 = turbulenceNoise * (1 - delta) * thinness0 * openness;\n    var noise1 = turbulenceNoise * delta * thinness0 * openness;\n    this.R[i + 1] += noise0 / 2;\n    this.L[i + 1] += noise0 / 2;\n    this.R[i + 2] += noise1 / 2;\n    this.L[i + 2] += noise1 / 2;\n  }\n};\nvar _default = Tract;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/audio/tract.js?");

/***/ }),

/***/ "./src/ui/tract-ui.js":
/*!****************************!*\
  !*** ./src/ui/tract-ui.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tract = _interopRequireDefault(__webpack_require__(/*! ../audio/tract */ \"./src/audio/tract.js\"));\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ../audio/glottis */ \"./src/audio/glottis.js\"));\n\nvar _ui = _interopRequireDefault(__webpack_require__(/*! ./ui */ \"./src/ui/ui.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar tractCanvas = document.getElementById(\"tractCanvas\");\nvar tractCtx = tractCanvas.getContext(\"2d\");\nvar backCanvas = document.getElementById(\"backCanvas\");\nvar backCtx = backCanvas.getContext(\"2d\");\nvar temp = {\n  a: 0,\n  b: 0\n};\nvar TractUI = {\n  originX: 340,\n  originY: 449,\n  radius: 298,\n  scale: 60,\n  tongueIndex: 12.9,\n  tongueDiameter: 2.43,\n  innerTongueControlRadius: 2.05,\n  outerTongueControlRadius: 3.5,\n  tongueTouch: 0,\n  angleScale: 0.64,\n  angleOffset: -0.24,\n  noseOffset: 0.8,\n  gridOffset: 1.7,\n  fillColour: 'pink',\n  lineColour: '#C070C6',\n  init: function init() {\n    this.ctx = tractCtx;\n    this.setRestDiameter();\n\n    for (var i = 0; i < _tract.default.n; i++) {\n      _tract.default.diameter[i] = _tract.default.targetDiameter[i] = _tract.default.restDiameter[i];\n    }\n\n    this.drawBackground();\n    this.tongueLowerIndexBound = _tract.default.bladeStart + 2;\n    this.tongueUpperIndexBound = _tract.default.tipStart - 3;\n    this.tongueIndexCentre = 0.5 * (this.tongueLowerIndexBound + this.tongueUpperIndexBound);\n  },\n  moveTo: function moveTo(i, d) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var wobble = _tract.default.maxAmplitude[_tract.default.n - 1] + _tract.default.noseMaxAmplitude[_tract.default.noseLength - 1];\n    wobble *= 0.03 * Math.sin(2 * i - 50 * time) * i / _tract.default.n;\n    angle += wobble;\n    var r = this.radius - this.scale * d + 100 * wobble;\n    this.ctx.moveTo(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle));\n  },\n  lineTo: function lineTo(i, d) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var wobble = _tract.default.maxAmplitude[_tract.default.n - 1] + _tract.default.noseMaxAmplitude[_tract.default.noseLength - 1];\n    wobble *= 0.03 * Math.sin(2 * i - 50 * time) * i / _tract.default.n;\n    angle += wobble;\n    var r = this.radius - this.scale * d + 100 * wobble;\n    this.ctx.lineTo(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle));\n  },\n  drawText: function drawText(i, d, text) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var r = this.radius - this.scale * d;\n    this.ctx.save();\n    this.ctx.translate(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle) + 2); //+8);\n\n    this.ctx.rotate(angle - Math.PI / 2);\n    this.ctx.fillText(text, 0, 0);\n    this.ctx.restore();\n  },\n  drawTextStraight: function drawTextStraight(i, d, text) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var r = this.radius - this.scale * d;\n    this.ctx.save();\n    this.ctx.translate(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle) + 2); //+8);\n    //this.ctx.rotate(angle-Math.PI/2);\n\n    this.ctx.fillText(text, 0, 0);\n    this.ctx.restore();\n  },\n  drawCircle: function drawCircle(i, d, radius) {\n    var angle = this.angleOffset + i * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var r = this.radius - this.scale * d;\n    this.ctx.beginPath();\n    this.ctx.arc(this.originX - r * Math.cos(angle), this.originY - r * Math.sin(angle), radius, 0, 2 * Math.PI);\n    this.ctx.fill();\n  },\n  getIndex: function getIndex(x, y) {\n    var xx = x - this.originX;\n    var yy = y - this.originY;\n    var angle = Math.atan2(yy, xx);\n\n    while (angle > 0) {\n      angle -= 2 * Math.PI;\n    }\n\n    return (Math.PI + angle - this.angleOffset) * (_tract.default.lipStart - 1) / (this.angleScale * Math.PI);\n  },\n  getDiameter: function getDiameter(x, y) {\n    var xx = x - this.originX;\n    var yy = y - this.originY;\n    return (this.radius - Math.sqrt(xx * xx + yy * yy)) / this.scale;\n  },\n  draw: function draw() {\n    this.ctx.clearRect(0, 0, tractCanvas.width, tractCanvas.height);\n    this.ctx.lineCap = 'round';\n    this.ctx.lineJoin = 'round';\n    this.drawTongueControl();\n    this.drawPitchControl();\n    var velum = _tract.default.noseDiameter[0];\n    var velumAngle = velum * 4; //first draw fill\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeStyle = this.fillColour;\n    this.ctx.fillStyle = this.fillColour;\n    this.moveTo(1, 0);\n\n    for (var i = 1; i < _tract.default.n; i++) {\n      this.lineTo(i, _tract.default.diameter[i]);\n    }\n\n    for (var i = _tract.default.n - 1; i >= 2; i--) {\n      this.lineTo(i, 0);\n    }\n\n    this.ctx.closePath();\n    this.ctx.stroke();\n    this.ctx.fill(); //for nose\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeStyle = this.fillColour;\n    this.ctx.fillStyle = this.fillColour;\n    this.moveTo(_tract.default.noseStart, -this.noseOffset);\n\n    for (var i = 1; i < _tract.default.noseLength; i++) {\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset - _tract.default.noseDiameter[i] * 0.9);\n    }\n\n    for (var i = _tract.default.noseLength - 1; i >= 1; i--) {\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset);\n    }\n\n    this.ctx.closePath(); //this.ctx.stroke();\n\n    this.ctx.fill(); //velum\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeStyle = this.fillColour;\n    this.ctx.fillStyle = this.fillColour;\n    this.moveTo(_tract.default.noseStart - 2, 0);\n    this.lineTo(_tract.default.noseStart, -this.noseOffset);\n    this.lineTo(_tract.default.noseStart + velumAngle, -this.noseOffset);\n    this.lineTo(_tract.default.noseStart + velumAngle - 2, 0);\n    this.ctx.closePath();\n    this.ctx.stroke();\n    this.ctx.fill(); //white text\n\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = \"20px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.globalAlpha = 1.0;\n    this.drawText(_tract.default.n * 0.10, 0.425, \"throat\");\n    this.drawText(_tract.default.n * 0.71, -1.8, \"nasal\");\n    this.drawText(_tract.default.n * 0.71, -1.3, \"cavity\");\n    this.ctx.font = \"22px Arial\";\n    this.drawText(_tract.default.n * 0.6, 0.9, \"oral\");\n    this.drawText(_tract.default.n * 0.7, 0.9, \"cavity\");\n    this.drawAmplitudes(); //then draw lines\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 5;\n    this.ctx.strokeStyle = this.lineColour;\n    this.ctx.lineJoin = 'round';\n    this.ctx.lineCap = 'round';\n    this.moveTo(1, _tract.default.diameter[0]);\n\n    for (var i = 2; i < _tract.default.n; i++) {\n      this.lineTo(i, _tract.default.diameter[i]);\n    }\n\n    this.moveTo(1, 0);\n\n    for (var i = 2; i <= _tract.default.noseStart - 2; i++) {\n      this.lineTo(i, 0);\n    }\n\n    this.moveTo(_tract.default.noseStart + velumAngle - 2, 0);\n\n    for (var i = _tract.default.noseStart + Math.ceil(velumAngle) - 2; i < _tract.default.n; i++) {\n      this.lineTo(i, 0);\n    }\n\n    this.ctx.stroke(); //for nose\n\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 5;\n    this.ctx.strokeStyle = this.lineColour;\n    this.ctx.lineJoin = 'round';\n    this.moveTo(_tract.default.noseStart, -this.noseOffset);\n\n    for (var i = 1; i < _tract.default.noseLength; i++) {\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset - _tract.default.noseDiameter[i] * 0.9);\n    }\n\n    this.moveTo(_tract.default.noseStart + velumAngle, -this.noseOffset);\n\n    for (var i = Math.ceil(velumAngle); i < _tract.default.noseLength; i++) {\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset);\n    }\n\n    this.ctx.stroke(); //velum\n\n    this.ctx.globalAlpha = velum * 5;\n    this.ctx.beginPath();\n    this.moveTo(_tract.default.noseStart - 2, 0);\n    this.lineTo(_tract.default.noseStart, -this.noseOffset);\n    this.moveTo(_tract.default.noseStart + velumAngle - 2, 0);\n    this.lineTo(_tract.default.noseStart + velumAngle, -this.noseOffset);\n    this.ctx.stroke();\n    this.ctx.fillStyle = \"orchid\";\n    this.ctx.font = \"20px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.globalAlpha = 0.7;\n    this.drawText(_tract.default.n * 0.95, 0.8 + 0.8 * _tract.default.diameter[_tract.default.n - 1], \" lip\");\n    this.ctx.globalAlpha = 1.0;\n    this.ctx.fillStyle = \"black\";\n    this.ctx.textAlign = \"left\";\n    this.ctx.fillText(_ui.default.debugText, 20, 20); //this.drawPositions();\n  },\n  drawBackground: function drawBackground() {\n    this.ctx = backCtx; //text\n\n    this.ctx.fillStyle = \"orchid\";\n    this.ctx.font = \"20px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.globalAlpha = 0.7;\n    this.drawText(_tract.default.n * 0.44, -0.28, \"soft\");\n    this.drawText(_tract.default.n * 0.51, -0.28, \"palate\");\n    this.drawText(_tract.default.n * 0.77, -0.28, \"hard\");\n    this.drawText(_tract.default.n * 0.84, -0.28, \"palate\");\n    this.drawText(_tract.default.n * 0.95, -0.28, \" lip\");\n    this.ctx.font = \"17px Arial\";\n    this.drawTextStraight(_tract.default.n * 0.18, 3, \"  tongue control\");\n    this.ctx.textAlign = \"left\";\n    this.drawText(_tract.default.n * 1.03, -1.07, \"nasals\");\n    this.drawText(_tract.default.n * 1.03, -0.28, \"stops\");\n    this.drawText(_tract.default.n * 1.03, 0.51, \"fricatives\"); //this.drawTextStraight(1.5, +0.8, \"glottis\")\n\n    this.ctx.strokeStyle = \"orchid\";\n    this.ctx.lineWidth = 2;\n    this.ctx.beginPath();\n    this.moveTo(_tract.default.n * 1.03, 0);\n    this.lineTo(_tract.default.n * 1.07, 0);\n    this.moveTo(_tract.default.n * 1.03, -this.noseOffset);\n    this.lineTo(_tract.default.n * 1.07, -this.noseOffset);\n    this.ctx.stroke();\n    this.ctx.globalAlpha = 0.9;\n    this.ctx.globalAlpha = 1.0;\n    this.ctx = tractCtx;\n  },\n  drawPositions: function drawPositions() {\n    this.ctx.fillStyle = \"orchid\";\n    this.ctx.font = \"24px Arial\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.globalAlpha = 0.6;\n    var a = 2;\n    var b = 1.5;\n    this.drawText(15, a + b * 0.60, 'æ'); //pat\n\n    this.drawText(13, a + b * 0.27, 'ɑ'); //part\n\n    this.drawText(12, a + b * 0.00, 'ɒ'); //pot\n\n    this.drawText(17.7, a + b * 0.05, '(ɔ)'); //port (rounded)\n\n    this.drawText(27, a + b * 0.65, 'ɪ'); //pit\n\n    this.drawText(27.4, a + b * 0.21, 'i'); //peat\n\n    this.drawText(20, a + b * 1.00, 'e'); //pet\n\n    this.drawText(18.1, a + b * 0.37, 'ʌ'); //putt   \n    //put ʊ\n\n    this.drawText(23, a + b * 0.1, '(u)'); //poot (rounded)   \n\n    this.drawText(21, a + b * 0.6, 'ə'); //pert [should be ɜ]\n\n    var nasals = -1.1;\n    var stops = -0.4;\n    var fricatives = 0.3;\n    var approximants = 1.1;\n    this.ctx.globalAlpha = 0.8; //approximants\n\n    this.drawText(38, approximants, 'l');\n    this.drawText(41, approximants, 'w'); //?\n\n    this.drawText(4.5, 0.37, 'h');\n\n    if (_glottis.default.isTouched || alwaysVoice) {\n      //voiced consonants\n      this.drawText(31.5, fricatives, 'ʒ');\n      this.drawText(36, fricatives, 'z');\n      this.drawText(41, fricatives, 'v');\n      this.drawText(22, stops, 'g');\n      this.drawText(36, stops, 'd');\n      this.drawText(41, stops, 'b');\n      this.drawText(22, nasals, 'ŋ');\n      this.drawText(36, nasals, 'n');\n      this.drawText(41, nasals, 'm');\n    } else {\n      //unvoiced consonants\n      this.drawText(31.5, fricatives, 'ʃ');\n      this.drawText(36, fricatives, 's');\n      this.drawText(41, fricatives, 'f');\n      this.drawText(22, stops, 'k');\n      this.drawText(36, stops, 't');\n      this.drawText(41, stops, 'p');\n      this.drawText(22, nasals, 'ŋ');\n      this.drawText(36, nasals, 'n');\n      this.drawText(41, nasals, 'm');\n    }\n  },\n  drawAmplitudes: function drawAmplitudes() {\n    this.ctx.strokeStyle = \"orchid\";\n    this.ctx.lineCap = \"butt\";\n    this.ctx.globalAlpha = 0.3;\n\n    for (var i = 2; i < _tract.default.n - 1; i++) {\n      this.ctx.beginPath();\n      this.ctx.lineWidth = Math.sqrt(_tract.default.maxAmplitude[i]) * 3;\n      this.moveTo(i, 0);\n      this.lineTo(i, _tract.default.diameter[i]);\n      this.ctx.stroke();\n    }\n\n    for (var i = 1; i < _tract.default.noseLength - 1; i++) {\n      this.ctx.beginPath();\n      this.ctx.lineWidth = Math.sqrt(_tract.default.noseMaxAmplitude[i]) * 3;\n      this.moveTo(i + _tract.default.noseStart, -this.noseOffset);\n      this.lineTo(i + _tract.default.noseStart, -this.noseOffset - _tract.default.noseDiameter[i] * 0.9);\n      this.ctx.stroke();\n    }\n\n    this.ctx.globalAlpha = 1;\n  },\n  drawTongueControl: function drawTongueControl() {\n    this.ctx.lineCap = \"round\";\n    this.ctx.lineJoin = \"round\";\n    this.ctx.strokeStyle = palePink;\n    this.ctx.fillStyle = palePink;\n    this.ctx.globalAlpha = 1.0;\n    this.ctx.beginPath();\n    this.ctx.lineWidth = 45; //outline\n\n    this.moveTo(this.tongueLowerIndexBound, this.innerTongueControlRadius);\n\n    for (var i = this.tongueLowerIndexBound + 1; i <= this.tongueUpperIndexBound; i++) {\n      this.lineTo(i, this.innerTongueControlRadius);\n    }\n\n    this.lineTo(this.tongueIndexCentre, this.outerTongueControlRadius);\n    this.ctx.closePath();\n    this.ctx.stroke();\n    this.ctx.fill();\n    var a = this.innerTongueControlRadius;\n    var c = this.outerTongueControlRadius;\n    var b = 0.5 * (a + c);\n    var r = 3;\n    this.ctx.fillStyle = \"orchid\";\n    this.ctx.globalAlpha = 0.3;\n    this.drawCircle(this.tongueIndexCentre, a, r);\n    this.drawCircle(this.tongueIndexCentre - 4.25, a, r);\n    this.drawCircle(this.tongueIndexCentre - 8.5, a, r);\n    this.drawCircle(this.tongueIndexCentre + 4.25, a, r);\n    this.drawCircle(this.tongueIndexCentre + 8.5, a, r);\n    this.drawCircle(this.tongueIndexCentre - 6.1, b, r);\n    this.drawCircle(this.tongueIndexCentre + 6.1, b, r);\n    this.drawCircle(this.tongueIndexCentre, b, r);\n    this.drawCircle(this.tongueIndexCentre, c, r);\n    this.ctx.globalAlpha = 1.0; //circle for tongue position\n\n    var angle = this.angleOffset + this.tongueIndex * this.angleScale * Math.PI / (_tract.default.lipStart - 1);\n    var r = this.radius - this.scale * this.tongueDiameter;\n    var x = this.originX - r * Math.cos(angle);\n    var y = this.originY - r * Math.sin(angle);\n    this.ctx.lineWidth = 4;\n    this.ctx.strokeStyle = \"orchid\";\n    this.ctx.globalAlpha = 0.7;\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, 18, 0, 2 * Math.PI);\n    this.ctx.stroke();\n    this.ctx.globalAlpha = 0.15;\n    this.ctx.fill();\n    this.ctx.globalAlpha = 1.0;\n    this.ctx.fillStyle = \"orchid\";\n  },\n  drawPitchControl: function drawPitchControl() {\n    var w = 9;\n    var h = 15;\n\n    if (_glottis.default.x) {\n      this.ctx.lineWidth = 4;\n      this.ctx.strokeStyle = \"orchid\";\n      this.ctx.globalAlpha = 0.7;\n      this.ctx.beginPath();\n      this.ctx.moveTo(_glottis.default.x - w, _glottis.default.y - h);\n      this.ctx.lineTo(_glottis.default.x + w, _glottis.default.y - h);\n      this.ctx.lineTo(_glottis.default.x + w, _glottis.default.y + h);\n      this.ctx.lineTo(_glottis.default.x - w, _glottis.default.y + h);\n      this.ctx.closePath();\n      this.ctx.stroke();\n      this.ctx.globalAlpha = 0.15;\n      this.ctx.fill();\n      this.ctx.globalAlpha = 1.0;\n    }\n  },\n  setRestDiameter: function setRestDiameter() {\n    for (var i = _tract.default.bladeStart; i < _tract.default.lipStart; i++) {\n      var t = 1.1 * Math.PI * (this.tongueIndex - i) / (_tract.default.tipStart - _tract.default.bladeStart);\n      var fixedTongueDiameter = 2 + (this.tongueDiameter - 2) / 1.5;\n      var curve = (1.5 - fixedTongueDiameter + this.gridOffset) * Math.cos(t);\n      if (i == _tract.default.bladeStart - 2 || i == _tract.default.lipStart - 1) curve *= 0.8;\n      if (i == _tract.default.bladeStart || i == _tract.default.lipStart - 2) curve *= 0.94;\n      _tract.default.restDiameter[i] = 1.5 - curve;\n    }\n  },\n  handleTouches: function handleTouches() {\n    if (this.tongueTouch != 0 && !this.tongueTouch.alive) this.tongueTouch = 0;\n\n    if (this.tongueTouch == 0) {\n      for (var j = 0; j < _ui.default.touchesWithMouse.length; j++) {\n        var touch = _ui.default.touchesWithMouse[j];\n        if (!touch.alive) continue;\n        if (touch.fricative_intensity == 1) continue; //only new touches will pass this\n\n        var x = touch.x;\n        var y = touch.y;\n        var index = TractUI.getIndex(x, y);\n        var diameter = TractUI.getDiameter(x, y);\n\n        if (index >= this.tongueLowerIndexBound - 4 && index <= this.tongueUpperIndexBound + 4 && diameter >= this.innerTongueControlRadius - 0.5 && diameter <= this.outerTongueControlRadius + 0.5) {\n          this.tongueTouch = touch;\n        }\n      }\n    }\n\n    if (this.tongueTouch != 0) {\n      var x = this.tongueTouch.x;\n      var y = this.tongueTouch.y;\n      var index = TractUI.getIndex(x, y);\n      var diameter = TractUI.getDiameter(x, y);\n      var fromPoint = (this.outerTongueControlRadius - diameter) / (this.outerTongueControlRadius - this.innerTongueControlRadius);\n      fromPoint = Math.clamp(fromPoint, 0, 1);\n      fromPoint = Math.pow(fromPoint, 0.58) - 0.2 * (fromPoint * fromPoint - fromPoint); //horrible kludge to fit curve to straight line\n\n      this.tongueDiameter = Math.clamp(diameter, this.innerTongueControlRadius, this.outerTongueControlRadius); //this.tongueIndex = Math.clamp(index, this.tongueLowerIndexBound, this.tongueUpperIndexBound);\n\n      var out = fromPoint * 0.5 * (this.tongueUpperIndexBound - this.tongueLowerIndexBound);\n      this.tongueIndex = Math.clamp(index, this.tongueIndexCentre - out, this.tongueIndexCentre + out);\n    }\n\n    this.setRestDiameter();\n\n    for (var i = 0; i < _tract.default.n; i++) {\n      _tract.default.targetDiameter[i] = _tract.default.restDiameter[i];\n    } //other constrictions and nose\n\n\n    _tract.default.velumTarget = 0.01;\n\n    for (var j = 0; j < _ui.default.touchesWithMouse.length; j++) {\n      var intIndex;\n      var touch = _ui.default.touchesWithMouse[j];\n      if (!touch.alive) continue;\n      var x = touch.x;\n      var y = touch.y;\n      var index = TractUI.getIndex(x, y);\n      var diameter = TractUI.getDiameter(x, y);\n\n      if (index > _tract.default.noseStart && diameter < -this.noseOffset) {\n        _tract.default.velumTarget = 0.4;\n      }\n\n      temp.a = index;\n      temp.b = diameter;\n      if (diameter < -0.85 - this.noseOffset) continue;\n      diameter -= 0.3;\n      if (diameter < 0) diameter = 0;\n      var width = 2;\n      if (index < 25) width = 10;else if (index >= _tract.default.tipStart) width = 5;else width = 10 - 5 * (index - 25) / (_tract.default.tipStart - 25);\n\n      if (index >= 2 && index < _tract.default.n && y < tractCanvas.height && diameter < 3) {\n        intIndex = Math.round(index);\n\n        for (var i = -Math.ceil(width) - 1; i < width + 1; i++) {\n          if (intIndex + i < 0 || intIndex + i >= _tract.default.n) continue;\n          var relpos = intIndex + i - index;\n          relpos = Math.abs(relpos) - 0.5;\n          var shrink;\n          if (relpos <= 0) shrink = 0;else if (relpos > width) shrink = 1;else shrink = 0.5 * (1 - Math.cos(Math.PI * relpos / width));\n\n          if (diameter < _tract.default.targetDiameter[intIndex + i]) {\n            _tract.default.targetDiameter[intIndex + i] = diameter + (_tract.default.targetDiameter[intIndex + i] - diameter) * shrink;\n          }\n        }\n      }\n    }\n  }\n};\nvar _default = TractUI;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/ui/tract-ui.js?");

/***/ }),

/***/ "./src/ui/ui.js":
/*!**********************!*\
  !*** ./src/ui/ui.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _tractUi = _interopRequireDefault(__webpack_require__(/*! ./tract-ui */ \"./src/ui/tract-ui.js\"));\n\nvar _audioSystem = _interopRequireDefault(__webpack_require__(/*! ../audio/audio-system */ \"./src/audio/audio-system.js\"));\n\nvar _glottis = _interopRequireDefault(__webpack_require__(/*! ../audio/glottis */ \"./src/audio/glottis.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar tractCanvas = document.getElementById(\"tractCanvas\");\nvar tractCtx = tractCanvas.getContext(\"2d\");\n\nfunction makeButton(x, y, width, height, text, switchedOn) {\n  var button = {};\n  button.x = x;\n  button.y = y;\n  button.width = width;\n  button.height = height;\n  button.text = text;\n  button.switchedOn = switchedOn;\n\n  button.draw = function (ctx) {\n    var radius = 10;\n    ctx.strokeStyle = palePink;\n    ctx.fillStyle = palePink;\n    ctx.globalAlpha = 1.0;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = 2 * radius;\n    ctx.beginPath();\n    ctx.moveTo(this.x + radius, this.y + radius);\n    ctx.lineTo(this.x + this.width - radius, this.y + radius);\n    ctx.lineTo(this.x + this.width - radius, this.y + this.height - radius);\n    ctx.lineTo(this.x + radius, this.y + this.height - radius);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.fill();\n    ctx.font = \"16px Arial\";\n    ctx.textAlign = \"center\";\n\n    if (this.switchedOn) {\n      ctx.fillStyle = \"orchid\";\n      ctx.globalAlpha = 0.6;\n    } else {\n      ctx.fillStyle = \"white\";\n      ctx.globalAlpha = 1.0;\n    }\n\n    this.drawText(ctx);\n  };\n\n  button.drawText = function (ctx) {\n    ctx.fillText(this.text, this.x + this.width / 2, this.y + this.height / 2 + 6);\n  };\n\n  button.handleTouchStart = function (touch) {\n    if (touch.x >= this.x && touch.x <= this.x + this.width && touch.y >= this.y && touch.y <= this.y + this.height) {\n      this.switchedOn = !this.switchedOn;\n    }\n  };\n\n  return button;\n}\n\nvar UI = {\n  width: 600,\n  top_margin: 5,\n  left_margin: 5,\n  inAboutScreen: false,\n  inInstructionsScreen: false,\n  instructionsLine: 0,\n  debugText: \"\",\n  init: function init() {\n    this.touchesWithMouse = [];\n    this.mouseTouch = {\n      alive: false,\n      endTime: 0\n    };\n    this.mouseDown = false;\n    this.aboutButton = makeButton(460, 392, 140, 30, \"about...\", true);\n    this.alwaysVoiceButton = makeButton(460, 428, 140, 30, \"always voice\", true);\n    this.autoWobbleButton = makeButton(460, 464, 140, 30, \"pitch wobble\", true);\n    tractCanvas.addEventListener('touchstart', UI.startTouches);\n    tractCanvas.addEventListener('touchmove', UI.moveTouches);\n    tractCanvas.addEventListener('touchend', UI.endTouches);\n    tractCanvas.addEventListener('touchcancel', UI.endTouches);\n    document.addEventListener('touchstart', function (event) {\n      event.preventDefault();\n    });\n    document.addEventListener('mousedown', function (event) {\n      UI.mouseDown = true;\n      event.preventDefault();\n      UI.startMouse(event);\n    });\n    document.addEventListener('mouseup', function (event) {\n      UI.mouseDown = false;\n      UI.endMouse(event);\n    });\n    document.addEventListener('mousemove', UI.moveMouse);\n  },\n  draw: function draw() {\n    this.alwaysVoiceButton.draw(tractCtx);\n    this.autoWobbleButton.draw(tractCtx);\n    this.aboutButton.draw(tractCtx);\n    if (this.inAboutScreen) this.drawAboutScreen();else if (this.inInstructionsScreen) this.drawInstructionsScreen();\n  },\n  drawAboutScreen: function drawAboutScreen() {\n    var ctx = tractCtx;\n    ctx.globalAlpha = 0.8;\n    ctx.fillStyle = \"white\";\n    ctx.rect(0, 0, 600, 600);\n    ctx.fill();\n    this.drawAboutText();\n  },\n  drawAboutText: function drawAboutText() {\n    var ctx = tractCtx;\n    ctx.globalAlpha = 1.0;\n    ctx.fillStyle = \"#C070C6\";\n    ctx.strokeStyle = \"#C070C6\";\n    ctx.font = \"50px Arial\";\n    ctx.lineWidth = 3;\n    ctx.textAlign = \"center\";\n    ctx.strokeText(\"P i n k   T r o m b o n e\", 300, 230);\n    ctx.fillText(\"P i n k   T r o m b o n e\", 300, 230);\n    ctx.font = \"28px Arial\";\n    ctx.fillText(\"bare-handed  speech synthesis\", 300, 330);\n    ctx.font = \"20px Arial\"; //ctx.fillText(\"(tap to start)\", 300, 380);   \n\n    if (isFirefox) {\n      ctx.font = \"20px Arial\";\n      ctx.fillText(\"(sorry - may work poorly with the Firefox browser)\", 300, 430);\n    }\n  },\n  drawInstructionsScreen: function drawInstructionsScreen() {\n    _audioSystem.default.mute();\n\n    var ctx = tractCtx;\n    ctx.globalAlpha = 0.85;\n    ctx.fillStyle = \"white\";\n    ctx.rect(0, 0, 600, 600);\n    ctx.fill();\n    ctx.globalAlpha = 1.0;\n    ctx.fillStyle = \"#C070C6\";\n    ctx.strokeStyle = \"#C070C6\";\n    ctx.font = \"24px Arial\";\n    ctx.lineWidth = 2;\n    ctx.textAlign = \"center\";\n    ctx.font = \"19px Arial\";\n    ctx.textAlign = \"left\";\n    this.instructionsLine = 0;\n    this.write(\"Sound is generated in the glottis (at the bottom left) then \");\n    this.write(\"filtered by the shape of the vocal tract. The voicebox \");\n    this.write(\"controls the pitch and intensity of the initial sound.\");\n    this.write(\"\");\n    this.write(\"Then, to talk:\");\n    this.write(\"\");\n    this.write(\"- move the body of the tongue to shape vowels\");\n    this.write(\"\");\n    this.write(\"- touch the oral cavity to narrow it, for fricative consonants\");\n    this.write(\"\");\n    this.write(\"- touch above the oral cavity to close it, for stop consonants\");\n    this.write(\"\");\n    this.write(\"- touch the nasal cavity to open the velum and let sound \");\n    this.write(\"   flow through the nose.\");\n    this.write(\"\");\n    this.write(\"\");\n    this.write(\"(tap anywhere to continue)\");\n    ctx.textAlign = \"center\";\n    ctx.fillText(\"[tap here to RESET]\", 470, 535);\n    this.instructionsLine = 18.8;\n    ctx.textAlign = \"left\";\n    this.write(\"Pink Trombone v1.1\");\n    this.write(\"by Neil Thapen\");\n    ctx.fillStyle = \"blue\";\n    ctx.globalAlpha = 0.6;\n    this.write(\"venuspatrol.nfshost.com\");\n    /*ctx.beginPath();\n    ctx.rect(35, 535, 230, 35);\n    ctx.rect(370, 505, 200, 50);\n    ctx.fill();*/\n\n    ctx.globalAlpha = 1.0;\n  },\n  instructionsScreenHandleTouch: function instructionsScreenHandleTouch(x, y) {\n    if (x >= 35 && x <= 265 && y >= 535 && y <= 570) window.location.href = \"http://venuspatrol.nfshost.com\";else if (x >= 370 && x <= 570 && y >= 505 && y <= 555) location.reload(false);else {\n      UI.inInstructionsScreen = false;\n      UI.aboutButton.switchedOn = true;\n\n      _audioSystem.default.unmute();\n    }\n  },\n  write: function write(text) {\n    tractCtx.fillText(text, 50, 100 + this.instructionsLine * 22);\n    this.instructionsLine += 1;\n    if (text == \"\") this.instructionsLine -= 0.3;\n  },\n  buttonsHandleTouchStart: function buttonsHandleTouchStart(touch) {\n    this.alwaysVoiceButton.handleTouchStart(touch);\n    alwaysVoice = this.alwaysVoiceButton.switchedOn;\n    this.autoWobbleButton.handleTouchStart(touch);\n    autoWobble = this.autoWobbleButton.switchedOn;\n    this.aboutButton.handleTouchStart(touch);\n  },\n  startTouches: function startTouches(event) {\n    event.preventDefault();\n\n    if (!_audioSystem.default.started) {\n      _audioSystem.default.started = true;\n\n      _audioSystem.default.startSound();\n    }\n\n    if (UI.inAboutScreen) {\n      UI.inAboutScreen = false;\n      return;\n    }\n\n    if (UI.inInstructionsScreen) {\n      var touches = event.changedTouches;\n\n      for (var j = 0; j < touches.length; j++) {\n        var x = (touches[j].pageX - UI.left_margin) / UI.width * 600;\n        var y = (touches[j].pageY - UI.top_margin) / UI.width * 600;\n      }\n\n      UI.instructionsScreenHandleTouch(x, y);\n      return;\n    }\n\n    var touches = event.changedTouches;\n\n    for (var j = 0; j < touches.length; j++) {\n      var touch = {};\n      touch.startTime = time;\n      touch.endTime = 0;\n      touch.fricative_intensity = 0;\n      touch.alive = true;\n      touch.id = touches[j].identifier;\n      touch.x = (touches[j].pageX - UI.left_margin) / UI.width * 600;\n      touch.y = (touches[j].pageY - UI.top_margin) / UI.width * 600;\n      touch.index = _tractUi.default.getIndex(touch.x, touch.y);\n      touch.diameter = _tractUi.default.getDiameter(touch.x, touch.y);\n      UI.touchesWithMouse.push(touch);\n      UI.buttonsHandleTouchStart(touch);\n    }\n\n    UI.handleTouches();\n  },\n  getTouchById: function getTouchById(id) {\n    for (var j = 0; j < UI.touchesWithMouse.length; j++) {\n      if (UI.touchesWithMouse[j].id == id && UI.touchesWithMouse[j].alive) return UI.touchesWithMouse[j];\n    }\n\n    return 0;\n  },\n  moveTouches: function moveTouches(event) {\n    var touches = event.changedTouches;\n\n    for (var j = 0; j < touches.length; j++) {\n      var touch = UI.getTouchById(touches[j].identifier);\n\n      if (touch != 0) {\n        touch.x = (touches[j].pageX - UI.left_margin) / UI.width * 600;\n        touch.y = (touches[j].pageY - UI.top_margin) / UI.width * 600;\n        touch.index = _tractUi.default.getIndex(touch.x, touch.y);\n        touch.diameter = _tractUi.default.getDiameter(touch.x, touch.y);\n      }\n    }\n\n    UI.handleTouches();\n  },\n  endTouches: function endTouches(event) {\n    var touches = event.changedTouches;\n\n    for (var j = 0; j < touches.length; j++) {\n      var touch = UI.getTouchById(touches[j].identifier);\n\n      if (touch != 0) {\n        touch.alive = false;\n        touch.endTime = time;\n      }\n    }\n\n    UI.handleTouches();\n\n    if (!UI.aboutButton.switchedOn) {\n      UI.inInstructionsScreen = true;\n    }\n  },\n  startMouse: function startMouse(event) {\n    if (!_audioSystem.default.started) {\n      _audioSystem.default.started = true;\n\n      _audioSystem.default.startSound();\n    }\n\n    if (UI.inAboutScreen) {\n      UI.inAboutScreen = false;\n      return;\n    }\n\n    if (UI.inInstructionsScreen) {\n      var x = (event.pageX - tractCanvas.offsetLeft) / UI.width * 600;\n      var y = (event.pageY - tractCanvas.offsetTop) / UI.width * 600;\n      UI.instructionsScreenHandleTouch(x, y);\n      return;\n    }\n\n    var touch = {};\n    touch.startTime = time;\n    touch.fricative_intensity = 0;\n    touch.endTime = 0;\n    touch.alive = true;\n    touch.id = \"mouse\" + Math.random();\n    touch.x = (event.pageX - tractCanvas.offsetLeft) / UI.width * 600;\n    touch.y = (event.pageY - tractCanvas.offsetTop) / UI.width * 600;\n    touch.index = _tractUi.default.getIndex(touch.x, touch.y);\n    touch.diameter = _tractUi.default.getDiameter(touch.x, touch.y);\n    UI.mouseTouch = touch;\n    UI.touchesWithMouse.push(touch);\n    UI.buttonsHandleTouchStart(touch);\n    UI.handleTouches();\n  },\n  moveMouse: function moveMouse(event) {\n    var touch = UI.mouseTouch;\n    if (!touch.alive) return;\n    touch.x = (event.pageX - tractCanvas.offsetLeft) / UI.width * 600;\n    touch.y = (event.pageY - tractCanvas.offsetTop) / UI.width * 600;\n    touch.index = _tractUi.default.getIndex(touch.x, touch.y);\n    touch.diameter = _tractUi.default.getDiameter(touch.x, touch.y);\n    UI.handleTouches();\n  },\n  endMouse: function endMouse(event) {\n    var touch = UI.mouseTouch;\n    if (!touch.alive) return;\n    touch.alive = false;\n    touch.endTime = time;\n    UI.handleTouches();\n    if (!UI.aboutButton.switchedOn) UI.inInstructionsScreen = true;\n  },\n  handleTouches: function handleTouches(event) {\n    _tractUi.default.handleTouches();\n\n    _glottis.default.handleTouches();\n  },\n  updateTouches: function updateTouches() {\n    var fricativeAttackTime = 0.1;\n\n    for (var j = UI.touchesWithMouse.length - 1; j >= 0; j--) {\n      var touch = UI.touchesWithMouse[j];\n\n      if (!touch.alive && time > touch.endTime + 1) {\n        UI.touchesWithMouse.splice(j, 1);\n      } else if (touch.alive) {\n        touch.fricative_intensity = Math.clamp((time - touch.startTime) / fricativeAttackTime, 0, 1);\n      } else {\n        touch.fricative_intensity = Math.clamp(1 - (time - touch.endTime) / fricativeAttackTime, 0, 1);\n      }\n    }\n  },\n  shapeToFitScreen: function shapeToFitScreen() {\n    if (window.innerWidth <= window.innerHeight) {\n      this.width = window.innerWidth - 10;\n      this.left_margin = 5;\n      this.top_margin = 0.5 * (window.innerHeight - this.width);\n    } else {\n      this.width = window.innerHeight - 10;\n      this.left_margin = 0.5 * (window.innerWidth - this.width);\n      this.top_margin = 5;\n    }\n\n    document.body.style.marginLeft = this.left_margin;\n    document.body.style.marginTop = this.top_margin;\n    tractCanvas.style.width = this.width;\n    backCanvas.style.width = this.width;\n  }\n};\nvar _default = UI;\nexports.default = _default;\n\n//# sourceURL=webpack:///./src/ui/ui.js?");

/***/ })

/******/ });